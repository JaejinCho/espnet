#!/bin/bash

# JJ: For ESPnet expriments, I can simply change expdir to a new one in input
# arguments and run this script as a whole
# (although we separte training run*.sh scripts into two:
# run.asrttsspkid.spkloss_weight.voxceleb1_filtered_bs48.sh and
# run.spkidonly.final.voxceleb1.sh depending on if it is tts+spkid loss (0 possible) or
# spkidonly, this backend script is unified).

# Copyright 2019 Nagoya University (Takenori Yoshimura)
#  Apache 2.0  (http://www.apache.org/licenses/LICENSE-2.0)

. ./path.sh || exit 1;
. ./cmd.sh || exit 1;

# eval_set
eval_set=voxceleb1_test_seg[seglen]

# general configuration
backend=pytorch
stage=5
stop_stage=100
ngpu=0       # number of gpu in training
nj=64        # numebr of parallel jobs
dumpdir=dump # directory to dump full features
verbose=0    # verbose option (if set > 1, get more log)
seed=1       # random seed number
resume=""    # the snapshot path to resume (if set empty, no effect)

# feature extraction related
fs=24000      # sampling frequency
fmax=""       # maximum frequency
fmin=""       # minimum frequency
n_mels=80     # number of mel basis
n_fft=1024    # number of fft points
n_shift=256   # number of shift points
win_length="" # window length

# config files
train_config=conf/train_pytorch_tacotron2+spkemb.yaml
decode_config=conf/decode.yaml

# decoding related
model=model.loss.best # or give just a specific snapshot (without any path info. e.g. snapshot.ep.6)
n_average=1 # if > 0, the model averaged with n_average ckpts will be used instead of model.loss.best
griffin_lim_iters=64  # the number of iterations of Griffin-Lim

# Speaker id related
spkloss_weight=0

# Speaker id backend related
expdir=""

# Set this to somewhere where you want to put your data, or where
# someone else has already put it. You'll want to change this
# if you're not on the CLSP grid.
datadir=/export/a15/vpanayotov/data

# base url for downloads.
data_url=www.openslr.org/resources/60

# exp tag
tag="" # tag for managing experiments.

. utils/parse_options.sh || exit 1;

# Set bash to 'debug' mode, it will exit on :
# -e 'error', -u 'undefined variable', -o ... 'error in pipeline', -x 'print commands',
set -e
set -u
set -o pipefail


if [ ! -f dump/${eval_set}/trials_fullshort ]; then
    python convert_trials.eval_fullshort.py data/voxceleb1_test/utt2num_frames dump/${eval_set}/utt2num_frames data/voxceleb1_test/trials dump/${eval_set}/trials_fullshort
fi


if [[ model.loss.best == ${model} ]]; then
    embname=`basename ${expdir}`
else
    embname=`basename ${expdir}`_${model}
fi

echo Embedding name: ${embname}

# Decoding is not needed assuming the shortshort config were run already. There
# embs are extracted for fullutt + seg. Only change is to use a different
# trials file properly generated by the above

# stage 9
if [ ${stage} -le 7 ] && [ ${stop_stage} -ge 7 ]; then
  echo "stage 7: Calculate score"
  # Get results using the out-of-domain PLDA model.
  $train_cmd exp/scores/log/spkid_scoring_fullshort_${embname}.${eval_set}.log \
    ivector-plda-scoring --normalize-length=true \
    "ivector-copy-plda --smoothing=0.0 dump/voxceleb1_train_filtered_trainNdev/plda.${embname} - |" \
    "ark:ivector-subtract-global-mean dump/voxceleb1_train_filtered_trainNdev/emb_mean.vec.${embname} ark:dump/${eval_set}/emb.${embname}.shortshort ark:- | transform-vec dump/voxceleb1_train_filtered_trainNdev/emb_transform.mat.${embname} ark:- ark:- | ivector-normalize-length ark:- ark:- |" \
    "ark:ivector-subtract-global-mean dump/voxceleb1_train_filtered_trainNdev/emb_mean.vec.${embname} ark:dump/${eval_set}/emb.${embname}.shortshort ark:- | transform-vec dump/voxceleb1_train_filtered_trainNdev/emb_transform.mat.${embname} ark:- ark:- | ivector-normalize-length ark:- ark:- |" \
    "cat dump/${eval_set}/trials_fullshort | cut -d\  --fields=1,2 |" exp/scores_voxceleb1_${eval_set}_embname${embname}.fullshort || exit 1;
fi
# stage 10
if [ ${stage} -le 8 ] && [ ${stop_stage} -ge 8 ]; then
  echo "stage 8: EER & MinDCF"
  qsub -cwd -o log/qsub.run.eer_mindcf.voxceleb1.fullshort.${embname}.${eval_set}.log -e log/qsub.run.eer_mindcf.voxceleb1.fullshort.${embname}.${eval_set}.log -l mem_free=200G,ram_free=200G run.eer_mindcf.voxceleb1.shortseg_fullshort.sh --eval_set ${eval_set} --embname ${embname}
fi
### JJ - end
