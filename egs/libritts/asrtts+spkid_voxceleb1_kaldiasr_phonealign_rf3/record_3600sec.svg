<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>read (kaldiio/compression_header.py:139) (2,121 samples, 1.18%)</title><rect x="3.1736%" y="308" width="1.1836%" height="15" fill="rgb(227,0,7)"/><text x="3.4236%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:383) (3,930 samples, 2.19%)</title><rect x="2.6987%" y="292" width="2.1931%" height="15" fill="rgb(217,0,24)"/><text x="2.9487%" y="302.50">r..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:387) (14,185 samples, 7.92%)</title><rect x="5.0269%" y="292" width="7.9159%" height="15" fill="rgb(221,193,54)"/><text x="5.2769%" y="302.50">read_matrix..</text></g><g><title>char_to_float (kaldiio/compression_header.py:226) (3,679 samples, 2.05%)</title><rect x="14.2459%" y="308" width="2.0531%" height="15" fill="rgb(248,212,6)"/><text x="14.4959%" y="318.50">c..</text></g><g><title>char_to_float (kaldiio/compression_header.py:227) (3,232 samples, 1.80%)</title><rect x="16.2989%" y="308" width="1.8036%" height="15" fill="rgb(208,68,35)"/><text x="16.5489%" y="318.50">c..</text></g><g><title>char_to_float (kaldiio/compression_header.py:228) (13,946 samples, 7.78%)</title><rect x="18.1025%" y="308" width="7.7825%" height="15" fill="rgb(232,128,0)"/><text x="18.3525%" y="318.50">char_to_flo..</text></g><g><title>char_to_float (kaldiio/compression_header.py:231) (6,604 samples, 3.69%)</title><rect x="25.9191%" y="308" width="3.6854%" height="15" fill="rgb(207,160,47)"/><text x="26.1691%" y="318.50">char..</text></g><g><title>char_to_float (kaldiio/compression_header.py:232) (3,756 samples, 2.10%)</title><rect x="29.6045%" y="308" width="2.0960%" height="15" fill="rgb(228,23,34)"/><text x="29.8545%" y="318.50">c..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:393) (40,242 samples, 22.46%)</title><rect x="13.1984%" y="292" width="22.4570%" height="15" fill="rgb(218,30,26)"/><text x="13.4484%" y="302.50">read_matrix_or_vector (kaldiio/matio..</text></g><g><title>char_to_float (kaldiio/compression_header.py:233) (7,087 samples, 3.95%)</title><rect x="31.7005%" y="308" width="3.9549%" height="15" fill="rgb(220,122,19)"/><text x="31.9505%" y="318.50">char..</text></g><g><title>read_kaldi (kaldiio/matio.py:339) (59,177 samples, 33.02%)</title><rect x="2.6396%" y="276" width="33.0236%" height="15" fill="rgb(250,228,42)"/><text x="2.8896%" y="286.50">read_kaldi (kaldiio/matio.py:339)</text></g><g><title>_load_mat (kaldiio/matio.py:262) (59,555 samples, 33.23%)</title><rect x="2.4292%" y="260" width="33.2346%" height="15" fill="rgb(240,193,28)"/><text x="2.6792%" y="270.50">_load_mat (kaldiio/matio.py:262)</text></g><g><title>__call__ (io_utils_speakerid.py:118) (60,681 samples, 33.86%)</title><rect x="1.8025%" y="212" width="33.8629%" height="15" fill="rgb(216,20,37)"/><text x="2.0525%" y="222.50">__call__ (io_utils_speakerid.py:118)</text></g><g><title>_get_from_loader (io_utils_speakerid.py:464) (60,665 samples, 33.85%)</title><rect x="1.8114%" y="228" width="33.8540%" height="15" fill="rgb(206,188,39)"/><text x="2.0614%" y="238.50">_get_from_loader (io_utils_speakerid.py:464)</text></g><g><title>load_mat (kaldiio/matio.py:203) (59,670 samples, 33.30%)</title><rect x="2.3667%" y="244" width="33.2987%" height="15" fill="rgb(217,207,13)"/><text x="2.6167%" y="254.50">load_mat (kaldiio/matio.py:203)</text></g><g><title>update_core (tts_speakerid.py:139) (61,743 samples, 34.46%)</title><rect x="1.7791%" y="132" width="34.4556%" height="15" fill="rgb(231,73,38)"/><text x="2.0291%" y="142.50">update_core (tts_speakerid.py:139)</text></g><g><title>__next__ (chainer/iterators/serial_iterator.py:77) (61,729 samples, 34.45%)</title><rect x="1.7869%" y="148" width="34.4478%" height="15" fill="rgb(225,20,46)"/><text x="2.0369%" y="158.50">__next__ (chainer/iterators/serial_iterator.py:77)</text></g><g><title>&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77) (61,729 samples, 34.45%)</title><rect x="1.7869%" y="164" width="34.4478%" height="15" fill="rgb(210,31,41)"/><text x="2.0369%" y="174.50">&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77)</text></g><g><title>__getitem__ (chainer/dataset/dataset_mixin.py:67) (61,728 samples, 34.45%)</title><rect x="1.7874%" y="180" width="34.4472%" height="15" fill="rgb(221,200,47)"/><text x="2.0374%" y="190.50">__getitem__ (chainer/dataset/dataset_mixin.py:67)</text></g><g><title>get_example (chainer/datasets/transform_dataset.py:52) (61,728 samples, 34.45%)</title><rect x="1.7874%" y="196" width="34.4472%" height="15" fill="rgb(226,26,5)"/><text x="2.0374%" y="206.50">get_example (chainer/datasets/transform_dataset.py:52)</text></g><g><title>__call__ (tts_speakerid.py:230) (3,099 samples, 1.73%)</title><rect x="36.3301%" y="148" width="1.7294%" height="15" fill="rgb(249,33,26)"/><text x="36.5801%" y="158.50"></text></g><g><title>pad_list (nets_utils.py:50) (2,543 samples, 1.42%)</title><rect x="36.6403%" y="164" width="1.4191%" height="15" fill="rgb(235,183,28)"/><text x="36.8903%" y="174.50"></text></g><g><title>update_core (tts_speakerid.py:140) (4,181 samples, 2.33%)</title><rect x="36.2346%" y="132" width="2.3332%" height="15" fill="rgb(221,5,38)"/><text x="36.4846%" y="142.50">u..</text></g><g><title>forward (torch/nn/modules/rnn.py:182) (2,355 samples, 1.31%)</title><rect x="40.2386%" y="228" width="1.3142%" height="15" fill="rgb(247,18,42)"/><text x="40.4886%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,385 samples, 1.33%)</title><rect x="40.2230%" y="212" width="1.3309%" height="15" fill="rgb(241,131,45)"/><text x="40.4730%" y="222.50"></text></g><g><title>forward (encoder.py:122) (2,389 samples, 1.33%)</title><rect x="40.2219%" y="196" width="1.3332%" height="15" fill="rgb(249,31,29)"/><text x="40.4719%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,978 samples, 2.22%)</title><rect x="39.3524%" y="180" width="2.2199%" height="15" fill="rgb(225,111,53)"/><text x="39.6024%" y="190.50">_..</text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:535) (3,985 samples, 2.22%)</title><rect x="39.3497%" y="164" width="2.2238%" height="15" fill="rgb(238,160,17)"/><text x="39.5997%" y="174.50">f..</text></g><g><title>forward (speakerid.py:188) (2,279 samples, 1.27%)</title><rect x="41.5757%" y="196" width="1.2718%" height="15" fill="rgb(214,148,48)"/><text x="41.8257%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,279 samples, 1.27%)</title><rect x="41.5757%" y="212" width="1.2718%" height="15" fill="rgb(232,36,49)"/><text x="41.8257%" y="222.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,679 samples, 1.50%)</title><rect x="41.5757%" y="180" width="1.4950%" height="15" fill="rgb(209,103,24)"/><text x="41.8257%" y="190.50"></text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:539) (2,684 samples, 1.50%)</title><rect x="41.5735%" y="164" width="1.4978%" height="15" fill="rgb(229,88,8)"/><text x="41.8235%" y="174.50"></text></g><g><title>threshold (torch/nn/functional.py:840) (4,320 samples, 2.41%)</title><rect x="45.5903%" y="308" width="2.4108%" height="15" fill="rgb(213,181,19)"/><text x="45.8403%" y="318.50">th..</text></g><g><title>forward (torch/nn/modules/activation.py:50) (4,470 samples, 2.49%)</title><rect x="45.5127%" y="292" width="2.4945%" height="15" fill="rgb(254,191,54)"/><text x="45.7627%" y="302.50">fo..</text></g><g><title>linear (torch/nn/functional.py:1352) (6,018 samples, 3.36%)</title><rect x="48.2349%" y="308" width="3.3583%" height="15" fill="rgb(241,83,37)"/><text x="48.4849%" y="318.50">lin..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (11,104 samples, 6.20%)</title><rect x="45.4028%" y="276" width="6.1966%" height="15" fill="rgb(233,36,39)"/><text x="45.6528%" y="286.50">__call__..</text></g><g><title>forward (torch/nn/modules/linear.py:67) (6,437 samples, 3.59%)</title><rect x="48.0072%" y="292" width="3.5922%" height="15" fill="rgb(226,3,54)"/><text x="48.2572%" y="302.50">forw..</text></g><g><title>forward (torch/nn/modules/container.py:92) (12,274 samples, 6.85%)</title><rect x="45.0138%" y="260" width="6.8495%" height="15" fill="rgb(245,192,40)"/><text x="45.2638%" y="270.50">forward (..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (12,455 samples, 6.95%)</title><rect x="44.9179%" y="244" width="6.9505%" height="15" fill="rgb(238,167,29)"/><text x="45.1679%" y="254.50">__call__ ..</text></g><g><title>forward (decoder_update.py:137) (18,573 samples, 10.36%)</title><rect x="44.3509%" y="228" width="10.3646%" height="15" fill="rgb(232,182,51)"/><text x="44.6009%" y="238.50">forward (decode..</text></g><g><title>dropout (torch/nn/functional.py:749) (4,192 samples, 2.34%)</title><rect x="52.3762%" y="244" width="2.3393%" height="15" fill="rgb(231,60,39)"/><text x="52.6262%" y="254.50">d..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (18,990 samples, 10.60%)</title><rect x="44.1210%" y="212" width="10.5973%" height="15" fill="rgb(208,69,12)"/><text x="44.3710%" y="222.50">__call__ (torch..</text></g><g><title>forward (decoder_update.py:681) (19,723 samples, 11.01%)</title><rect x="43.8313%" y="196" width="11.0064%" height="15" fill="rgb(235,93,37)"/><text x="44.0813%" y="206.50">forward (decoder..</text></g><g><title>forward (decoder_update.py:682) (2,674 samples, 1.49%)</title><rect x="54.8377%" y="196" width="1.4922%" height="15" fill="rgb(213,116,39)"/><text x="55.0877%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (6,574 samples, 3.67%)</title><rect x="56.7764%" y="244" width="3.6686%" height="15" fill="rgb(222,207,29)"/><text x="57.0264%" y="254.50">__ca..</text></g><g><title>forward (torch/nn/modules/rnn.py:732) (5,893 samples, 3.29%)</title><rect x="57.1564%" y="260" width="3.2886%" height="15" fill="rgb(206,96,30)"/><text x="57.4064%" y="270.50">for..</text></g><g><title>forward (decoder_update.py:72) (6,973 samples, 3.89%)</title><rect x="56.6776%" y="228" width="3.8913%" height="15" fill="rgb(218,138,4)"/><text x="56.9276%" y="238.50">forw..</text></g><g><title>_zoneout (decoder_update.py:85) (3,337 samples, 1.86%)</title><rect x="61.0851%" y="276" width="1.8622%" height="15" fill="rgb(250,191,14)"/><text x="61.3351%" y="286.50">_..</text></g><g><title>forward (decoder_update.py:73) (16,784 samples, 9.37%)</title><rect x="60.5689%" y="228" width="9.3663%" height="15" fill="rgb(239,60,40)"/><text x="60.8189%" y="238.50">forward (deco..</text></g><g><title>_zoneout (decoder_update.py:82) (16,495 samples, 9.21%)</title><rect x="60.7302%" y="244" width="9.2050%" height="15" fill="rgb(206,27,48)"/><text x="60.9802%" y="254.50">_zoneout (dec..</text></g><g><title>&lt;listcomp&gt; (decoder_update.py:82) (16,282 samples, 9.09%)</title><rect x="60.8490%" y="260" width="9.0861%" height="15" fill="rgb(225,35,8)"/><text x="61.0990%" y="270.50">&lt;listcomp&gt; (d..</text></g><g><title>_zoneout (decoder_update.py:86) (12,522 samples, 6.99%)</title><rect x="62.9473%" y="276" width="6.9879%" height="15" fill="rgb(250,213,24)"/><text x="63.1973%" y="286.50">_zoneout ..</text></g><g><title>__rsub__ (torch/tensor.py:363) (3,905 samples, 2.18%)</title><rect x="67.7560%" y="292" width="2.1792%" height="15" fill="rgb(247,123,22)"/><text x="68.0060%" y="302.50">_..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (23,811 samples, 13.29%)</title><rect x="56.6491%" y="212" width="13.2877%" height="15" fill="rgb(231,138,38)"/><text x="56.8991%" y="222.50">__call__ (torch/nn/m..</text></g><g><title>forward (decoder_update.py:683) (24,972 samples, 13.94%)</title><rect x="56.3299%" y="196" width="13.9356%" height="15" fill="rgb(231,145,46)"/><text x="56.5799%" y="206.50">forward (decoder_upda..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (6,151 samples, 3.43%)</title><rect x="71.0669%" y="244" width="3.4326%" height="15" fill="rgb(251,118,11)"/><text x="71.3169%" y="254.50">__c..</text></g><g><title>forward (torch/nn/modules/rnn.py:732) (5,522 samples, 3.08%)</title><rect x="71.4179%" y="260" width="3.0815%" height="15" fill="rgb(217,147,25)"/><text x="71.6679%" y="270.50">for..</text></g><g><title>forward (decoder_update.py:72) (6,514 samples, 3.64%)</title><rect x="70.9765%" y="228" width="3.6351%" height="15" fill="rgb(247,81,37)"/><text x="71.2265%" y="238.50">forw..</text></g><g><title>_zoneout (decoder_update.py:85) (3,163 samples, 1.77%)</title><rect x="75.0675%" y="276" width="1.7651%" height="15" fill="rgb(209,12,38)"/><text x="75.3175%" y="286.50"></text></g><g><title>forward (decoder_update.py:73) (15,924 samples, 8.89%)</title><rect x="74.6116%" y="228" width="8.8864%" height="15" fill="rgb(227,1,9)"/><text x="74.8616%" y="238.50">forward (deco..</text></g><g><title>_zoneout (decoder_update.py:82) (15,648 samples, 8.73%)</title><rect x="74.7656%" y="244" width="8.7323%" height="15" fill="rgb(248,47,43)"/><text x="75.0156%" y="254.50">_zoneout (de..</text></g><g><title>&lt;listcomp&gt; (decoder_update.py:82) (15,463 samples, 8.63%)</title><rect x="74.8689%" y="260" width="8.6291%" height="15" fill="rgb(221,10,30)"/><text x="75.1189%" y="270.50">&lt;listcomp&gt; (..</text></g><g><title>_zoneout (decoder_update.py:86) (11,944 samples, 6.67%)</title><rect x="76.8326%" y="276" width="6.6653%" height="15" fill="rgb(210,229,1)"/><text x="77.0826%" y="286.50">_zoneout ..</text></g><g><title>__rsub__ (torch/tensor.py:363) (3,824 samples, 2.13%)</title><rect x="81.3640%" y="292" width="2.1340%" height="15" fill="rgb(222,148,37)"/><text x="81.6140%" y="302.50">_..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (22,493 samples, 12.55%)</title><rect x="70.9469%" y="212" width="12.5522%" height="15" fill="rgb(234,67,33)"/><text x="71.1969%" y="222.50">__call__ (torch/nn/..</text></g><g><title>forward (decoder_update.py:686) (22,973 samples, 12.82%)</title><rect x="70.7527%" y="196" width="12.8200%" height="15" fill="rgb(247,98,35)"/><text x="71.0027%" y="206.50">forward (decoder_up..</text></g><g><title>forward (decoder_update.py:687) (2,984 samples, 1.67%)</title><rect x="83.5727%" y="196" width="1.6652%" height="15" fill="rgb(247,138,52)"/><text x="83.8227%" y="206.50"></text></g><g><title>linear (torch/nn/functional.py:1354) (2,122 samples, 1.18%)</title><rect x="86.0706%" y="244" width="1.1842%" height="15" fill="rgb(213,79,30)"/><text x="86.3206%" y="254.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,439 samples, 1.36%)</title><rect x="85.9031%" y="212" width="1.3611%" height="15" fill="rgb(246,177,23)"/><text x="86.1531%" y="222.50"></text></g><g><title>forward (torch/nn/modules/linear.py:67) (2,379 samples, 1.33%)</title><rect x="85.9366%" y="228" width="1.3276%" height="15" fill="rgb(230,62,27)"/><text x="86.1866%" y="238.50"></text></g><g><title>forward (decoder_update.py:688) (3,869 samples, 2.16%)</title><rect x="85.2380%" y="196" width="2.1591%" height="15" fill="rgb(216,154,8)"/><text x="85.4880%" y="206.50">f..</text></g><g><title>linear (torch/nn/functional.py:1352) (2,997 samples, 1.67%)</title><rect x="87.7748%" y="244" width="1.6725%" height="15" fill="rgb(244,35,45)"/><text x="88.0248%" y="254.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,261 samples, 1.82%)</title><rect x="87.6297%" y="212" width="1.8198%" height="15" fill="rgb(251,115,12)"/><text x="87.8797%" y="222.50">_..</text></g><g><title>forward (torch/nn/modules/linear.py:67) (3,203 samples, 1.79%)</title><rect x="87.6621%" y="228" width="1.7874%" height="15" fill="rgb(240,54,50)"/><text x="87.9121%" y="238.50">f..</text></g><g><title>forward (decoder_update.py:689) (3,913 samples, 2.18%)</title><rect x="87.3970%" y="196" width="2.1836%" height="15" fill="rgb(233,84,52)"/><text x="87.6470%" y="206.50">f..</text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:546) (83,970 samples, 46.86%)</title><rect x="43.0819%" y="164" width="46.8593%" height="15" fill="rgb(207,117,47)"/><text x="43.3319%" y="174.50">forward (e2e_tts_tacotron2_speakerid_update_unsync.py:546)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (83,967 samples, 46.86%)</title><rect x="43.0836%" y="180" width="46.8576%" height="15" fill="rgb(249,43,39)"/><text x="43.3336%" y="190.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:550) (3,946 samples, 2.20%)</title><rect x="89.9417%" y="164" width="2.2021%" height="15" fill="rgb(209,38,44)"/><text x="90.1917%" y="174.50">f..</text></g><g><title>update_core (tts_speakerid.py:146) (97,075 samples, 54.17%)</title><rect x="38.5689%" y="132" width="54.1725%" height="15" fill="rgb(236,212,23)"/><text x="38.8189%" y="142.50">update_core (tts_speakerid.py:146)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (97,052 samples, 54.16%)</title><rect x="38.5818%" y="148" width="54.1597%" height="15" fill="rgb(242,79,21)"/><text x="38.8318%" y="158.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>update_core (tts_speakerid.py:147) (2,399 samples, 1.34%)</title><rect x="92.7415%" y="132" width="1.3388%" height="15" fill="rgb(211,96,35)"/><text x="92.9915%" y="142.50"></text></g><g><title>backward (torch/tensor.py:102) (2,399 samples, 1.34%)</title><rect x="92.7415%" y="148" width="1.3388%" height="15" fill="rgb(253,215,40)"/><text x="92.9915%" y="158.50"></text></g><g><title>backward (torch/autograd/__init__.py:90) (2,324 samples, 1.30%)</title><rect x="92.7833%" y="164" width="1.2969%" height="15" fill="rgb(211,81,21)"/><text x="93.0333%" y="174.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:32) (2,626 samples, 1.47%)</title><rect x="94.4586%" y="148" width="1.4654%" height="15" fill="rgb(208,190,38)"/><text x="94.7086%" y="158.50"></text></g><g><title>norm (torch/tensor.py:252) (2,389 samples, 1.33%)</title><rect x="94.5908%" y="164" width="1.3332%" height="15" fill="rgb(235,213,38)"/><text x="94.8408%" y="174.50"></text></g><g><title>norm (torch/functional.py:715) (2,312 samples, 1.29%)</title><rect x="94.6338%" y="180" width="1.2902%" height="15" fill="rgb(237,122,38)"/><text x="94.8838%" y="190.50"></text></g><g><title>update_core (tts_speakerid.py:156) (4,296 samples, 2.40%)</title><rect x="94.0808%" y="132" width="2.3974%" height="15" fill="rgb(244,218,35)"/><text x="94.3308%" y="142.50">up..</text></g><g><title>step (torch/optim/adam.py:101) (1,927 samples, 1.08%)</title><rect x="96.4832%" y="148" width="1.0754%" height="15" fill="rgb(240,68,47)"/><text x="96.7332%" y="158.50"></text></g><g><title>update_core (tts_speakerid.py:161) (5,877 samples, 3.28%)</title><rect x="96.4826%" y="132" width="3.2796%" height="15" fill="rgb(210,16,53)"/><text x="96.7326%" y="142.50">upd..</text></g><g><title>run (chainer/training/trainer.py:316) (177,577 samples, 99.10%)</title><rect x="0.8254%" y="100" width="99.0965%" height="15" fill="rgb(235,124,12)"/><text x="1.0754%" y="110.50">run (chainer/training/trainer.py:316)</text></g><g><title>update (tts_speakerid.py:166) (177,577 samples, 99.10%)</title><rect x="0.8254%" y="116" width="99.0965%" height="15" fill="rgb(224,169,11)"/><text x="1.0754%" y="126.50">update (tts_speakerid.py:166)</text></g><g><title>&lt;module&gt; (tts_train_speakerid.py:193) (178,709 samples, 99.73%)</title><rect x="0.2656%" y="52" width="99.7282%" height="15" fill="rgb(250,166,2)"/><text x="0.5156%" y="62.50">&lt;module&gt; (tts_train_speakerid.py:193)</text></g><g><title>main (tts_train_speakerid.py:187) (178,545 samples, 99.64%)</title><rect x="0.3572%" y="68" width="99.6367%" height="15" fill="rgb(242,216,29)"/><text x="0.6072%" y="78.50">main (tts_train_speakerid.py:187)</text></g><g><title>train (tts_speakerid.py:487) (177,711 samples, 99.17%)</title><rect x="0.8226%" y="84" width="99.1713%" height="15" fill="rgb(230,116,27)"/><text x="1.0726%" y="94.50">train (tts_speakerid.py:487)</text></g><g><title>all (179,196 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>