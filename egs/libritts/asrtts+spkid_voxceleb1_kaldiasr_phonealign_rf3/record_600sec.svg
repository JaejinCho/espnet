<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (tts_train_speakerid.py:18) (639 samples, 1.90%)</title><rect x="0.3665%" y="52" width="1.9041%" height="15" fill="rgb(227,0,7)"/><text x="0.6165%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (639 samples, 1.90%)</title><rect x="0.3665%" y="68" width="1.9041%" height="15" fill="rgb(217,0,24)"/><text x="0.6165%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (547 samples, 1.63%)</title><rect x="0.6407%" y="84" width="1.6300%" height="15" fill="rgb(221,193,54)"/><text x="0.8907%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (547 samples, 1.63%)</title><rect x="0.6407%" y="100" width="1.6300%" height="15" fill="rgb(248,212,6)"/><text x="0.8907%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (544 samples, 1.62%)</title><rect x="0.6496%" y="116" width="1.6210%" height="15" fill="rgb(208,68,35)"/><text x="0.8996%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (544 samples, 1.62%)</title><rect x="0.6496%" y="132" width="1.6210%" height="15" fill="rgb(232,128,0)"/><text x="0.8996%" y="142.50"></text></g><g><title>&lt;module&gt; (tts_interface.py:8) (544 samples, 1.62%)</title><rect x="0.6496%" y="148" width="1.6210%" height="15" fill="rgb(207,160,47)"/><text x="0.8996%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (544 samples, 1.62%)</title><rect x="0.6496%" y="164" width="1.6210%" height="15" fill="rgb(228,23,34)"/><text x="0.8996%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (544 samples, 1.62%)</title><rect x="0.6496%" y="180" width="1.6210%" height="15" fill="rgb(218,30,26)"/><text x="0.8996%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (544 samples, 1.62%)</title><rect x="0.6496%" y="196" width="1.6210%" height="15" fill="rgb(220,122,19)"/><text x="0.8996%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (544 samples, 1.62%)</title><rect x="0.6496%" y="212" width="1.6210%" height="15" fill="rgb(250,228,42)"/><text x="0.8996%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (544 samples, 1.62%)</title><rect x="0.6496%" y="228" width="1.6210%" height="15" fill="rgb(240,193,28)"/><text x="0.8996%" y="238.50"></text></g><g><title>&lt;module&gt; (e2e_tts_tacotron2_speakerid_update_unsync.py:19) (560 samples, 1.67%)</title><rect x="2.3243%" y="212" width="1.6687%" height="15" fill="rgb(216,20,37)"/><text x="2.5743%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (560 samples, 1.67%)</title><rect x="2.3243%" y="228" width="1.6687%" height="15" fill="rgb(206,188,39)"/><text x="2.5743%" y="238.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (560 samples, 1.67%)</title><rect x="2.3243%" y="244" width="1.6687%" height="15" fill="rgb(217,207,13)"/><text x="2.5743%" y="254.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (560 samples, 1.67%)</title><rect x="2.3243%" y="260" width="1.6687%" height="15" fill="rgb(231,73,38)"/><text x="2.5743%" y="270.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (558 samples, 1.66%)</title><rect x="2.3302%" y="276" width="1.6627%" height="15" fill="rgb(225,20,46)"/><text x="2.5802%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (558 samples, 1.66%)</title><rect x="2.3302%" y="292" width="1.6627%" height="15" fill="rgb(210,31,41)"/><text x="2.5802%" y="302.50"></text></g><g><title>&lt;module&gt; (torch/__init__.py:84) (479 samples, 1.43%)</title><rect x="2.5656%" y="308" width="1.4273%" height="15" fill="rgb(221,200,47)"/><text x="2.8156%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (479 samples, 1.43%)</title><rect x="2.5656%" y="324" width="1.4273%" height="15" fill="rgb(226,26,5)"/><text x="2.8156%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (479 samples, 1.43%)</title><rect x="2.5656%" y="340" width="1.4273%" height="15" fill="rgb(249,33,26)"/><text x="2.8156%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:658) (479 samples, 1.43%)</title><rect x="2.5656%" y="356" width="1.4273%" height="15" fill="rgb(235,183,28)"/><text x="2.8156%" y="366.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:571) (479 samples, 1.43%)</title><rect x="2.5656%" y="372" width="1.4273%" height="15" fill="rgb(221,5,38)"/><text x="2.8156%" y="382.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:922) (479 samples, 1.43%)</title><rect x="2.5656%" y="388" width="1.4273%" height="15" fill="rgb(247,18,42)"/><text x="2.8156%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (479 samples, 1.43%)</title><rect x="2.5656%" y="404" width="1.4273%" height="15" fill="rgb(241,131,45)"/><text x="2.8156%" y="414.50"></text></g><g><title>main (tts_train_speakerid.py:144) (804 samples, 2.40%)</title><rect x="2.3213%" y="68" width="2.3958%" height="15" fill="rgb(249,31,29)"/><text x="2.5713%" y="78.50">ma..</text></g><g><title>dynamic_import (dynamic_import.py:21) (804 samples, 2.40%)</title><rect x="2.3213%" y="84" width="2.3958%" height="15" fill="rgb(225,111,53)"/><text x="2.5713%" y="94.50">dy..</text></g><g><title>import_module (importlib/__init__.py:126) (804 samples, 2.40%)</title><rect x="2.3213%" y="100" width="2.3958%" height="15" fill="rgb(238,160,17)"/><text x="2.5713%" y="110.50">im..</text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:994) (804 samples, 2.40%)</title><rect x="2.3213%" y="116" width="2.3958%" height="15" fill="rgb(214,148,48)"/><text x="2.5713%" y="126.50">_g..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (804 samples, 2.40%)</title><rect x="2.3213%" y="132" width="2.3958%" height="15" fill="rgb(232,36,49)"/><text x="2.5713%" y="142.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (804 samples, 2.40%)</title><rect x="2.3213%" y="148" width="2.3958%" height="15" fill="rgb(209,103,24)"/><text x="2.5713%" y="158.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (804 samples, 2.40%)</title><rect x="2.3213%" y="164" width="2.3958%" height="15" fill="rgb(229,88,8)"/><text x="2.5713%" y="174.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (803 samples, 2.39%)</title><rect x="2.3243%" y="180" width="2.3928%" height="15" fill="rgb(213,181,19)"/><text x="2.5743%" y="190.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (803 samples, 2.39%)</title><rect x="2.3243%" y="196" width="2.3928%" height="15" fill="rgb(254,191,54)"/><text x="2.5743%" y="206.50">_c..</text></g><g><title>_apply (torch/nn/modules/module.py:193) (996 samples, 2.97%)</title><rect x="5.3637%" y="148" width="2.9679%" height="15" fill="rgb(241,83,37)"/><text x="5.6137%" y="158.50">_ap..</text></g><g><title>convert (torch/nn/modules/module.py:379) (996 samples, 2.97%)</title><rect x="5.3637%" y="164" width="2.9679%" height="15" fill="rgb(233,36,39)"/><text x="5.6137%" y="174.50">con..</text></g><g><title>train (tts_speakerid.py:324) (1,102 samples, 3.28%)</title><rect x="5.3458%" y="84" width="3.2838%" height="15" fill="rgb(226,3,54)"/><text x="5.5958%" y="94.50">tra..</text></g><g><title>to (torch/nn/modules/module.py:381) (1,102 samples, 3.28%)</title><rect x="5.3458%" y="100" width="3.2838%" height="15" fill="rgb(245,192,40)"/><text x="5.5958%" y="110.50">to ..</text></g><g><title>_apply (torch/nn/modules/module.py:187) (1,102 samples, 3.28%)</title><rect x="5.3458%" y="116" width="3.2838%" height="15" fill="rgb(238,167,29)"/><text x="5.5958%" y="126.50">_ap..</text></g><g><title>_apply (torch/nn/modules/module.py:187) (1,102 samples, 3.28%)</title><rect x="5.3458%" y="132" width="3.2838%" height="15" fill="rgb(232,182,51)"/><text x="5.5958%" y="142.50">_ap..</text></g><g><title>loads (json/__init__.py:349) (1,352 samples, 4.03%)</title><rect x="8.6355%" y="116" width="4.0287%" height="15" fill="rgb(231,60,39)"/><text x="8.8855%" y="126.50">load..</text></g><g><title>train (tts_speakerid.py:343) (1,951 samples, 5.81%)</title><rect x="8.6296%" y="84" width="5.8136%" height="15" fill="rgb(208,69,12)"/><text x="8.8796%" y="94.50">train (..</text></g><g><title>load (json/__init__.py:299) (1,951 samples, 5.81%)</title><rect x="8.6296%" y="100" width="5.8136%" height="15" fill="rgb(235,93,37)"/><text x="8.8796%" y="110.50">load (j..</text></g><g><title>loads (json/__init__.py:354) (597 samples, 1.78%)</title><rect x="12.6643%" y="116" width="1.7790%" height="15" fill="rgb(213,116,39)"/><text x="12.9143%" y="126.50">l..</text></g><g><title>decode (json/decoder.py:339) (597 samples, 1.78%)</title><rect x="12.6643%" y="132" width="1.7790%" height="15" fill="rgb(222,207,29)"/><text x="12.9143%" y="142.50">d..</text></g><g><title>raw_decode (json/decoder.py:355) (597 samples, 1.78%)</title><rect x="12.6643%" y="148" width="1.7790%" height="15" fill="rgb(206,96,30)"/><text x="12.9143%" y="158.50">r..</text></g><g><title>read (kaldiio/compression_header.py:137) (392 samples, 1.17%)</title><rect x="17.7538%" y="308" width="1.1681%" height="15" fill="rgb(218,138,4)"/><text x="18.0038%" y="318.50"></text></g><g><title>asarray (numpy/core/numeric.py:538) (352 samples, 1.05%)</title><rect x="17.8730%" y="324" width="1.0489%" height="15" fill="rgb(250,191,14)"/><text x="18.1230%" y="334.50"></text></g><g><title>read (kaldiio/compression_header.py:139) (899 samples, 2.68%)</title><rect x="18.9219%" y="308" width="2.6789%" height="15" fill="rgb(239,60,40)"/><text x="19.1719%" y="318.50">re..</text></g><g><title>uint_to_float (kaldiio/compression_header.py:113) (747 samples, 2.23%)</title><rect x="19.3748%" y="324" width="2.2259%" height="15" fill="rgb(206,27,48)"/><text x="19.6248%" y="334.50">u..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:383) (1,774 samples, 5.29%)</title><rect x="17.0863%" y="292" width="5.2862%" height="15" fill="rgb(225,35,8)"/><text x="17.3363%" y="302.50">read_m..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:387) (2,908 samples, 8.67%)</title><rect x="22.5096%" y="292" width="8.6653%" height="15" fill="rgb(250,213,24)"/><text x="22.7596%" y="302.50">read_matrix_..</text></g><g><title>char_to_float (kaldiio/compression_header.py:223) (779 samples, 2.32%)</title><rect x="31.4997%" y="308" width="2.3213%" height="15" fill="rgb(247,123,22)"/><text x="31.7497%" y="318.50">c..</text></g><g><title>char_to_float (kaldiio/compression_header.py:226) (696 samples, 2.07%)</title><rect x="33.8479%" y="308" width="2.0740%" height="15" fill="rgb(231,138,38)"/><text x="34.0979%" y="318.50">c..</text></g><g><title>char_to_float (kaldiio/compression_header.py:227) (392 samples, 1.17%)</title><rect x="35.9218%" y="308" width="1.1681%" height="15" fill="rgb(231,145,46)"/><text x="36.1718%" y="318.50"></text></g><g><title>char_to_float (kaldiio/compression_header.py:228) (1,351 samples, 4.03%)</title><rect x="37.0899%" y="308" width="4.0257%" height="15" fill="rgb(251,118,11)"/><text x="37.3399%" y="318.50">char..</text></g><g><title>char_to_float (kaldiio/compression_header.py:231) (798 samples, 2.38%)</title><rect x="41.1395%" y="308" width="2.3779%" height="15" fill="rgb(217,147,25)"/><text x="41.3895%" y="318.50">ch..</text></g><g><title>char_to_float (kaldiio/compression_header.py:232) (366 samples, 1.09%)</title><rect x="43.5174%" y="308" width="1.0906%" height="15" fill="rgb(247,81,37)"/><text x="43.7674%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:393) (5,190 samples, 15.47%)</title><rect x="31.4491%" y="292" width="15.4653%" height="15" fill="rgb(209,12,38)"/><text x="31.6991%" y="302.50">read_matrix_or_vector (k..</text></g><g><title>char_to_float (kaldiio/compression_header.py:233) (774 samples, 2.31%)</title><rect x="44.6080%" y="308" width="2.3064%" height="15" fill="rgb(227,1,9)"/><text x="44.8580%" y="318.50">c..</text></g><g><title>read_kaldi (kaldiio/matio.py:339) (10,101 samples, 30.10%)</title><rect x="16.8271%" y="276" width="30.0992%" height="15" fill="rgb(248,47,43)"/><text x="17.0771%" y="286.50">read_kaldi (kaldiio/matio.py:339)</text></g><g><title>__call__ (io_utils_speakerid.py:118) (10,434 samples, 31.09%)</title><rect x="15.8378%" y="212" width="31.0915%" height="15" fill="rgb(221,10,30)"/><text x="16.0878%" y="222.50">__call__ (io_utils_speakerid.py:118)</text></g><g><title>_get_from_loader (io_utils_speakerid.py:464) (10,429 samples, 31.08%)</title><rect x="15.8527%" y="228" width="31.0766%" height="15" fill="rgb(210,229,1)"/><text x="16.1027%" y="238.50">_get_from_loader (io_utils_speakerid.py:464)</text></g><g><title>load_mat (kaldiio/matio.py:203) (10,226 samples, 30.47%)</title><rect x="16.4576%" y="244" width="30.4717%" height="15" fill="rgb(222,148,37)"/><text x="16.7076%" y="254.50">load_mat (kaldiio/matio.py:203)</text></g><g><title>_load_mat (kaldiio/matio.py:262) (10,202 samples, 30.40%)</title><rect x="16.5291%" y="260" width="30.4002%" height="15" fill="rgb(234,67,33)"/><text x="16.7791%" y="270.50">_load_mat (kaldiio/matio.py:262)</text></g><g><title>update_core (tts_speakerid.py:139) (10,616 samples, 31.63%)</title><rect x="15.8110%" y="132" width="31.6338%" height="15" fill="rgb(247,98,35)"/><text x="16.0610%" y="142.50">update_core (tts_speakerid.py:139)</text></g><g><title>__next__ (chainer/iterators/serial_iterator.py:77) (10,616 samples, 31.63%)</title><rect x="15.8110%" y="148" width="31.6338%" height="15" fill="rgb(247,138,52)"/><text x="16.0610%" y="158.50">__next__ (chainer/iterators/serial_iterator.py:77)</text></g><g><title>&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77) (10,616 samples, 31.63%)</title><rect x="15.8110%" y="164" width="31.6338%" height="15" fill="rgb(213,79,30)"/><text x="16.0610%" y="174.50">&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77)</text></g><g><title>__getitem__ (chainer/dataset/dataset_mixin.py:67) (10,615 samples, 31.63%)</title><rect x="15.8139%" y="180" width="31.6309%" height="15" fill="rgb(246,177,23)"/><text x="16.0639%" y="190.50">__getitem__ (chainer/dataset/dataset_mixin.py:67)</text></g><g><title>get_example (chainer/datasets/transform_dataset.py:52) (10,615 samples, 31.63%)</title><rect x="15.8139%" y="196" width="31.6309%" height="15" fill="rgb(230,62,27)"/><text x="16.0639%" y="206.50">get_example (chainer/datasets/transform_dataset.py:..</text></g><g><title>__call__ (tts_speakerid.py:230) (680 samples, 2.03%)</title><rect x="47.5580%" y="148" width="2.0263%" height="15" fill="rgb(216,154,8)"/><text x="47.8080%" y="158.50">_..</text></g><g><title>pad_list (nets_utils.py:50) (552 samples, 1.64%)</title><rect x="47.9394%" y="164" width="1.6449%" height="15" fill="rgb(244,35,45)"/><text x="48.1894%" y="174.50"></text></g><g><title>update_core (tts_speakerid.py:140) (841 samples, 2.51%)</title><rect x="47.4448%" y="132" width="2.5060%" height="15" fill="rgb(251,115,12)"/><text x="47.6948%" y="142.50">up..</text></g><g><title>forward (encoder.py:122) (340 samples, 1.01%)</title><rect x="51.1547%" y="196" width="1.0131%" height="15" fill="rgb(240,54,50)"/><text x="51.4047%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (340 samples, 1.01%)</title><rect x="51.1547%" y="212" width="1.0131%" height="15" fill="rgb(233,84,52)"/><text x="51.4047%" y="222.50"></text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:535) (555 samples, 1.65%)</title><rect x="50.5379%" y="164" width="1.6538%" height="15" fill="rgb(207,117,47)"/><text x="50.7879%" y="174.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (555 samples, 1.65%)</title><rect x="50.5379%" y="180" width="1.6538%" height="15" fill="rgb(249,43,39)"/><text x="50.7879%" y="190.50"></text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:539) (375 samples, 1.12%)</title><rect x="52.1917%" y="164" width="1.1174%" height="15" fill="rgb(209,38,44)"/><text x="52.4417%" y="174.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (374 samples, 1.11%)</title><rect x="52.1946%" y="180" width="1.1145%" height="15" fill="rgb(236,212,23)"/><text x="52.4446%" y="190.50"></text></g><g><title>forward (torch/nn/modules/activation.py:50) (686 samples, 2.04%)</title><rect x="55.3771%" y="292" width="2.0442%" height="15" fill="rgb(242,79,21)"/><text x="55.6271%" y="302.50">f..</text></g><g><title>threshold (torch/nn/functional.py:840) (660 samples, 1.97%)</title><rect x="55.4546%" y="308" width="1.9667%" height="15" fill="rgb(211,96,35)"/><text x="55.7046%" y="318.50">t..</text></g><g><title>linear (torch/nn/functional.py:1352) (879 samples, 2.62%)</title><rect x="57.6328%" y="308" width="2.6193%" height="15" fill="rgb(253,215,40)"/><text x="57.8828%" y="318.50">li..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,668 samples, 4.97%)</title><rect x="55.2877%" y="276" width="4.9704%" height="15" fill="rgb(211,81,21)"/><text x="55.5377%" y="286.50">__call..</text></g><g><title>forward (torch/nn/modules/linear.py:67) (952 samples, 2.84%)</title><rect x="57.4213%" y="292" width="2.8368%" height="15" fill="rgb(208,190,38)"/><text x="57.6713%" y="302.50">fo..</text></g><g><title>forward (torch/nn/modules/container.py:92) (1,829 samples, 5.45%)</title><rect x="54.9957%" y="260" width="5.4501%" height="15" fill="rgb(235,213,38)"/><text x="55.2457%" y="270.50">forward..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,853 samples, 5.52%)</title><rect x="54.9271%" y="244" width="5.5216%" height="15" fill="rgb(237,122,38)"/><text x="55.1771%" y="254.50">__call_..</text></g><g><title>forward (decoder_update.py:137) (2,837 samples, 8.45%)</title><rect x="54.4027%" y="228" width="8.4538%" height="15" fill="rgb(244,218,35)"/><text x="54.6527%" y="238.50">forward (dec..</text></g><g><title>dropout (torch/nn/functional.py:749) (652 samples, 1.94%)</title><rect x="60.9136%" y="244" width="1.9428%" height="15" fill="rgb(240,68,47)"/><text x="61.1636%" y="254.50">d..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,884 samples, 8.59%)</title><rect x="54.2656%" y="212" width="8.5938%" height="15" fill="rgb(210,16,53)"/><text x="54.5156%" y="222.50">__call__ (to..</text></g><g><title>forward (decoder_update.py:681) (2,981 samples, 8.88%)</title><rect x="54.0779%" y="196" width="8.8829%" height="15" fill="rgb(235,124,12)"/><text x="54.3279%" y="206.50">forward (deco..</text></g><g><title>forward (decoder_update.py:682) (406 samples, 1.21%)</title><rect x="62.9608%" y="196" width="1.2098%" height="15" fill="rgb(224,169,11)"/><text x="63.2108%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,074 samples, 3.20%)</title><rect x="64.5639%" y="244" width="3.2003%" height="15" fill="rgb(250,166,2)"/><text x="64.8139%" y="254.50">__c..</text></g><g><title>forward (torch/nn/modules/rnn.py:732) (971 samples, 2.89%)</title><rect x="64.8708%" y="260" width="2.8934%" height="15" fill="rgb(242,216,29)"/><text x="65.1208%" y="270.50">fo..</text></g><g><title>forward (decoder_update.py:72) (1,124 samples, 3.35%)</title><rect x="64.4924%" y="228" width="3.3493%" height="15" fill="rgb(230,116,27)"/><text x="64.7424%" y="238.50">for..</text></g><g><title>_zoneout (decoder_update.py:85) (518 samples, 1.54%)</title><rect x="68.3006%" y="276" width="1.5436%" height="15" fill="rgb(228,99,48)"/><text x="68.5506%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,689 samples, 10.99%)</title><rect x="64.4656%" y="212" width="10.9926%" height="15" fill="rgb(253,11,6)"/><text x="64.7156%" y="222.50">__call__ (torch/..</text></g><g><title>forward (decoder_update.py:73) (2,556 samples, 7.62%)</title><rect x="67.8417%" y="228" width="7.6164%" height="15" fill="rgb(247,143,39)"/><text x="68.0917%" y="238.50">forward (d..</text></g><g><title>_zoneout (decoder_update.py:82) (2,499 samples, 7.45%)</title><rect x="68.0116%" y="244" width="7.4466%" height="15" fill="rgb(236,97,10)"/><text x="68.2616%" y="254.50">_zoneout (..</text></g><g><title>&lt;listcomp&gt; (decoder_update.py:82) (2,458 samples, 7.32%)</title><rect x="68.1337%" y="260" width="7.3244%" height="15" fill="rgb(233,208,19)"/><text x="68.3837%" y="270.50">&lt;listcomp&gt;..</text></g><g><title>_zoneout (decoder_update.py:86) (1,884 samples, 5.61%)</title><rect x="69.8442%" y="276" width="5.6140%" height="15" fill="rgb(216,164,2)"/><text x="70.0942%" y="286.50">_zoneou..</text></g><g><title>__rsub__ (torch/tensor.py:363) (572 samples, 1.70%)</title><rect x="73.7537%" y="292" width="1.7045%" height="15" fill="rgb(220,129,5)"/><text x="74.0037%" y="302.50"></text></g><g><title>forward (decoder_update.py:683) (3,865 samples, 11.52%)</title><rect x="64.1706%" y="196" width="11.5170%" height="15" fill="rgb(242,17,10)"/><text x="64.4206%" y="206.50">forward (decoder_..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (925 samples, 2.76%)</title><rect x="76.3908%" y="244" width="2.7563%" height="15" fill="rgb(242,107,0)"/><text x="76.6408%" y="254.50">__..</text></g><g><title>forward (torch/nn/modules/rnn.py:732) (844 samples, 2.51%)</title><rect x="76.6322%" y="260" width="2.5150%" height="15" fill="rgb(251,28,31)"/><text x="76.8822%" y="270.50">fo..</text></g><g><title>forward (decoder_update.py:72) (1,001 samples, 2.98%)</title><rect x="76.2865%" y="228" width="2.9828%" height="15" fill="rgb(233,223,10)"/><text x="76.5365%" y="238.50">for..</text></g><g><title>_zoneout (decoder_update.py:85) (450 samples, 1.34%)</title><rect x="79.6478%" y="276" width="1.3409%" height="15" fill="rgb(215,21,27)"/><text x="79.8978%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,456 samples, 10.30%)</title><rect x="76.2657%" y="212" width="10.2983%" height="15" fill="rgb(232,23,21)"/><text x="76.5157%" y="222.50">__call__ (torch..</text></g><g><title>forward (decoder_update.py:73) (2,448 samples, 7.29%)</title><rect x="79.2693%" y="228" width="7.2946%" height="15" fill="rgb(244,5,23)"/><text x="79.5193%" y="238.50">forward (d..</text></g><g><title>_zoneout (decoder_update.py:82) (2,401 samples, 7.15%)</title><rect x="79.4094%" y="244" width="7.1546%" height="15" fill="rgb(226,81,46)"/><text x="79.6594%" y="254.50">_zoneout (..</text></g><g><title>&lt;listcomp&gt; (decoder_update.py:82) (2,362 samples, 7.04%)</title><rect x="79.5256%" y="260" width="7.0384%" height="15" fill="rgb(247,70,30)"/><text x="79.7756%" y="270.50">&lt;listcomp..</text></g><g><title>_zoneout (decoder_update.py:86) (1,871 samples, 5.58%)</title><rect x="80.9887%" y="276" width="5.5753%" height="15" fill="rgb(212,68,19)"/><text x="81.2387%" y="286.50">_zoneou..</text></g><g><title>__rsub__ (torch/tensor.py:363) (550 samples, 1.64%)</title><rect x="84.9251%" y="292" width="1.6389%" height="15" fill="rgb(240,187,13)"/><text x="85.1751%" y="302.50"></text></g><g><title>forward (decoder_update.py:686) (3,525 samples, 10.50%)</title><rect x="76.1107%" y="196" width="10.5039%" height="15" fill="rgb(223,113,26)"/><text x="76.3607%" y="206.50">forward (decode..</text></g><g><title>forward (decoder_update.py:687) (425 samples, 1.27%)</title><rect x="86.6146%" y="196" width="1.2664%" height="15" fill="rgb(206,192,2)"/><text x="86.8646%" y="206.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (373 samples, 1.11%)</title><rect x="88.5277%" y="212" width="1.1115%" height="15" fill="rgb(241,108,4)"/><text x="88.7777%" y="222.50"></text></g><g><title>forward (torch/nn/modules/linear.py:67) (358 samples, 1.07%)</title><rect x="88.5724%" y="228" width="1.0668%" height="15" fill="rgb(247,173,49)"/><text x="88.8224%" y="238.50"></text></g><g><title>forward (decoder_update.py:688) (625 samples, 1.86%)</title><rect x="87.8810%" y="196" width="1.8624%" height="15" fill="rgb(224,114,35)"/><text x="88.1310%" y="206.50">f..</text></g><g><title>linear (torch/nn/functional.py:1352) (482 samples, 1.44%)</title><rect x="90.0742%" y="244" width="1.4363%" height="15" fill="rgb(245,159,27)"/><text x="90.3242%" y="254.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (522 samples, 1.56%)</title><rect x="89.9580%" y="212" width="1.5555%" height="15" fill="rgb(245,172,44)"/><text x="90.2080%" y="222.50"></text></g><g><title>forward (torch/nn/modules/linear.py:67) (512 samples, 1.53%)</title><rect x="89.9878%" y="228" width="1.5257%" height="15" fill="rgb(236,23,11)"/><text x="90.2378%" y="238.50"></text></g><g><title>forward (decoder_update.py:689) (633 samples, 1.89%)</title><rect x="89.7434%" y="196" width="1.8862%" height="15" fill="rgb(205,117,38)"/><text x="89.9934%" y="206.50">f..</text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:546) (12,954 samples, 38.60%)</title><rect x="53.3121%" y="164" width="38.6007%" height="15" fill="rgb(237,72,25)"/><text x="53.5621%" y="174.50">forward (e2e_tts_tacotron2_speakerid_update_unsync.py:546)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (12,953 samples, 38.60%)</title><rect x="53.3151%" y="180" width="38.5977%" height="15" fill="rgb(244,70,9)"/><text x="53.5651%" y="190.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>forward (e2e_tts_tacotron2_speakerid_update_unsync.py:550) (480 samples, 1.43%)</title><rect x="91.9128%" y="164" width="1.4303%" height="15" fill="rgb(217,125,39)"/><text x="92.1628%" y="174.50"></text></g><g><title>update_core (tts_speakerid.py:146) (14,750 samples, 43.95%)</title><rect x="49.9508%" y="132" width="43.9524%" height="15" fill="rgb(235,36,10)"/><text x="50.2008%" y="142.50">update_core (tts_speakerid.py:146)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (14,749 samples, 43.95%)</title><rect x="49.9538%" y="148" width="43.9495%" height="15" fill="rgb(251,123,47)"/><text x="50.2038%" y="158.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>update_core (tts_speakerid.py:147) (491 samples, 1.46%)</title><rect x="93.9033%" y="132" width="1.4631%" height="15" fill="rgb(221,13,13)"/><text x="94.1533%" y="142.50"></text></g><g><title>backward (torch/tensor.py:102) (491 samples, 1.46%)</title><rect x="93.9033%" y="148" width="1.4631%" height="15" fill="rgb(238,131,9)"/><text x="94.1533%" y="158.50"></text></g><g><title>backward (torch/autograd/__init__.py:90) (478 samples, 1.42%)</title><rect x="93.9420%" y="164" width="1.4244%" height="15" fill="rgb(211,50,8)"/><text x="94.1920%" y="174.50"></text></g><g><title>update_core (tts_speakerid.py:156) (589 samples, 1.76%)</title><rect x="95.3664%" y="132" width="1.7551%" height="15" fill="rgb(245,182,24)"/><text x="95.6164%" y="142.50"></text></g><g><title>update_core (tts_speakerid.py:161) (791 samples, 2.36%)</title><rect x="97.1215%" y="132" width="2.3570%" height="15" fill="rgb(242,14,37)"/><text x="97.3715%" y="142.50">u..</text></g><g><title>update (tts_speakerid.py:166) (28,448 samples, 84.77%)</title><rect x="14.8097%" y="116" width="84.7701%" height="15" fill="rgb(246,228,12)"/><text x="15.0597%" y="126.50">update (tts_speakerid.py:166)</text></g><g><title>run (chainer/training/trainer.py:316) (28,449 samples, 84.77%)</title><rect x="14.8097%" y="100" width="84.7731%" height="15" fill="rgb(213,55,15)"/><text x="15.0597%" y="110.50">run (chainer/training/trainer.py:316)</text></g><g><title>&lt;module&gt; (tts_train_speakerid.py:193) (32,788 samples, 97.70%)</title><rect x="2.2706%" y="52" width="97.7026%" height="15" fill="rgb(209,9,3)"/><text x="2.5206%" y="62.50">&lt;module&gt; (tts_train_speakerid.py:193)</text></g><g><title>main (tts_train_speakerid.py:187) (31,963 samples, 95.24%)</title><rect x="4.7290%" y="68" width="95.2442%" height="15" fill="rgb(230,59,30)"/><text x="4.9790%" y="78.50">main (tts_train_speakerid.py:187)</text></g><g><title>train (tts_speakerid.py:487) (28,583 samples, 85.17%)</title><rect x="14.8008%" y="84" width="85.1724%" height="15" fill="rgb(209,121,21)"/><text x="15.0508%" y="94.50">train (tts_speakerid.py:487)</text></g><g><title>all (33,559 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>