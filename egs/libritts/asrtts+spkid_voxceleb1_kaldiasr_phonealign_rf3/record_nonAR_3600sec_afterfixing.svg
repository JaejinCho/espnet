<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>read_matrix_or_vector (kaldiio/matio.py:383) (2,060 samples, 1.09%)</title><rect x="1.8084%" y="292" width="1.0855%" height="15" fill="rgb(227,0,7)"/><text x="2.0584%" y="302.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:387) (7,250 samples, 3.82%)</title><rect x="2.9502%" y="292" width="3.8202%" height="15" fill="rgb(217,0,24)"/><text x="3.2002%" y="302.50">read..</text></g><g><title>char_to_float (kaldiio/compression_header.py:228) (5,355 samples, 2.82%)</title><rect x="9.0014%" y="308" width="2.8217%" height="15" fill="rgb(221,193,54)"/><text x="9.2514%" y="318.50">ch..</text></g><g><title>char_to_float (kaldiio/compression_header.py:231) (2,806 samples, 1.48%)</title><rect x="11.8341%" y="308" width="1.4785%" height="15" fill="rgb(248,212,6)"/><text x="12.0841%" y="318.50"></text></g><g><title>char_to_float (kaldiio/compression_header.py:232) (1,982 samples, 1.04%)</title><rect x="13.3126%" y="308" width="1.0444%" height="15" fill="rgb(208,68,35)"/><text x="13.5626%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:393) (20,606 samples, 10.86%)</title><rect x="6.9037%" y="292" width="10.8577%" height="15" fill="rgb(232,128,0)"/><text x="7.1537%" y="302.50">read_matrix_or_v..</text></g><g><title>char_to_float (kaldiio/compression_header.py:233) (6,461 samples, 3.40%)</title><rect x="14.3570%" y="308" width="3.4044%" height="15" fill="rgb(207,160,47)"/><text x="14.6070%" y="318.50">cha..</text></g><g><title>_load_mat (kaldiio/matio.py:262) (30,839 samples, 16.25%)</title><rect x="1.5223%" y="260" width="16.2497%" height="15" fill="rgb(228,23,34)"/><text x="1.7723%" y="270.50">_load_mat (kaldiio/matio...</text></g><g><title>read_kaldi (kaldiio/matio.py:339) (30,417 samples, 16.03%)</title><rect x="1.7446%" y="276" width="16.0273%" height="15" fill="rgb(218,30,26)"/><text x="1.9946%" y="286.50">read_kaldi (kaldiio/matio..</text></g><g><title>__call__ (io_utils_speakerid.py:118) (32,014 samples, 16.87%)</title><rect x="0.9037%" y="212" width="16.8688%" height="15" fill="rgb(220,122,19)"/><text x="1.1537%" y="222.50">__call__ (io_utils_speaker..</text></g><g><title>_get_from_loader (io_utils_speakerid.py:464) (31,986 samples, 16.85%)</title><rect x="0.9184%" y="228" width="16.8541%" height="15" fill="rgb(250,228,42)"/><text x="1.1684%" y="238.50">_get_from_loader (io_utils..</text></g><g><title>load_mat (kaldiio/matio.py:203) (30,984 samples, 16.33%)</title><rect x="1.4464%" y="244" width="16.3261%" height="15" fill="rgb(240,193,28)"/><text x="1.6964%" y="254.50">load_mat (kaldiio/matio.p..</text></g><g><title>__next__ (chainer/iterators/serial_iterator.py:77) (33,189 samples, 17.49%)</title><rect x="0.8689%" y="148" width="17.4880%" height="15" fill="rgb(216,20,37)"/><text x="1.1189%" y="158.50">__next__ (chainer/iterators..</text></g><g><title>&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77) (33,186 samples, 17.49%)</title><rect x="0.8705%" y="164" width="17.4864%" height="15" fill="rgb(206,188,39)"/><text x="1.1205%" y="174.50">&lt;listcomp&gt; (chainer/iterato..</text></g><g><title>__getitem__ (chainer/dataset/dataset_mixin.py:67) (33,168 samples, 17.48%)</title><rect x="0.8800%" y="180" width="17.4769%" height="15" fill="rgb(217,207,13)"/><text x="1.1300%" y="190.50">__getitem__ (chainer/datase..</text></g><g><title>get_example (chainer/datasets/transform_dataset.py:52) (33,166 samples, 17.48%)</title><rect x="0.8810%" y="196" width="17.4758%" height="15" fill="rgb(231,73,38)"/><text x="1.1310%" y="206.50">get_example (chainer/datase..</text></g><g><title>update_core (tts_speakerid.py:139) (33,230 samples, 17.51%)</title><rect x="0.8478%" y="132" width="17.5096%" height="15" fill="rgb(225,20,46)"/><text x="1.0978%" y="142.50">update_core (tts_speakerid...</text></g><g><title>__call__ (tts_speakerid.py:224) (24,630 samples, 12.98%)</title><rect x="18.3626%" y="148" width="12.9780%" height="15" fill="rgb(210,31,41)"/><text x="18.6126%" y="158.50">__call__ (tts_speak..</text></g><g><title>__call__ (tts_speakerid.py:230) (2,550 samples, 1.34%)</title><rect x="31.5093%" y="148" width="1.3436%" height="15" fill="rgb(221,200,47)"/><text x="31.7593%" y="158.50"></text></g><g><title>update_core (tts_speakerid.py:140) (28,558 samples, 15.05%)</title><rect x="18.3574%" y="132" width="15.0478%" height="15" fill="rgb(226,26,5)"/><text x="18.6074%" y="142.50">update_core (tts_speake..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,173 samples, 1.14%)</title><rect x="34.7915%" y="276" width="1.1450%" height="15" fill="rgb(249,33,26)"/><text x="35.0415%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,200 samples, 1.16%)</title><rect x="34.7789%" y="244" width="1.1592%" height="15" fill="rgb(235,183,28)"/><text x="35.0289%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (2,199 samples, 1.16%)</title><rect x="34.7794%" y="260" width="1.1587%" height="15" fill="rgb(221,5,38)"/><text x="35.0294%" y="270.50"></text></g><g><title>forward (speakerid.py:108) (2,209 samples, 1.16%)</title><rect x="34.7752%" y="228" width="1.1640%" height="15" fill="rgb(247,18,42)"/><text x="35.0252%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,304 samples, 1.74%)</title><rect x="35.9397%" y="244" width="1.7409%" height="15" fill="rgb(241,131,45)"/><text x="36.1897%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (3,294 samples, 1.74%)</title><rect x="35.9449%" y="260" width="1.7357%" height="15" fill="rgb(249,31,29)"/><text x="36.1949%" y="270.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (3,273 samples, 1.72%)</title><rect x="35.9560%" y="276" width="1.7246%" height="15" fill="rgb(225,111,53)"/><text x="36.2060%" y="286.50"></text></g><g><title>forward (speakerid.py:110) (3,307 samples, 1.74%)</title><rect x="35.9391%" y="228" width="1.7425%" height="15" fill="rgb(238,160,17)"/><text x="36.1891%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,209 samples, 4.85%)</title><rect x="33.7745%" y="212" width="4.8524%" height="15" fill="rgb(214,148,48)"/><text x="34.0245%" y="222.50">__call..</text></g><g><title>forward (speakerid.py:188) (9,215 samples, 4.86%)</title><rect x="33.7724%" y="196" width="4.8556%" height="15" fill="rgb(232,36,49)"/><text x="34.0224%" y="206.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (10,674 samples, 5.62%)</title><rect x="33.7693%" y="180" width="5.6243%" height="15" fill="rgb(209,103,24)"/><text x="34.0193%" y="190.50">__call_..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:354) (10,694 samples, 5.63%)</title><rect x="33.7629%" y="164" width="5.6349%" height="15" fill="rgb(229,88,8)"/><text x="34.0129%" y="174.50">forward..</text></g><g><title>make_pad_mask (nets_utils.py:141) (10,353 samples, 5.46%)</title><rect x="39.4526%" y="228" width="5.4552%" height="15" fill="rgb(213,181,19)"/><text x="39.7026%" y="238.50">make_pa..</text></g><g><title>make_non_pad_mask (nets_utils.py:247) (10,487 samples, 5.53%)</title><rect x="39.4300%" y="212" width="5.5258%" height="15" fill="rgb(254,191,54)"/><text x="39.6800%" y="222.50">make_no..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:520) (10,570 samples, 5.57%)</title><rect x="39.4047%" y="196" width="5.5695%" height="15" fill="rgb(241,83,37)"/><text x="39.6547%" y="206.50">_source..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:303) (10,628 samples, 5.60%)</title><rect x="39.4026%" y="180" width="5.6001%" height="15" fill="rgb(233,36,39)"/><text x="39.6526%" y="190.50">_forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (5,329 samples, 2.81%)</title><rect x="45.2904%" y="292" width="2.8080%" height="15" fill="rgb(226,3,54)"/><text x="45.5404%" y="302.50">__..</text></g><g><title>forward (encoder_layer.py:50) (5,571 samples, 2.94%)</title><rect x="45.1782%" y="276" width="2.9355%" height="15" fill="rgb(245,192,40)"/><text x="45.4282%" y="286.50">fo..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,265 samples, 1.19%)</title><rect x="48.6079%" y="292" width="1.1935%" height="15" fill="rgb(238,167,29)"/><text x="48.8579%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (2,532 samples, 1.33%)</title><rect x="48.4825%" y="276" width="1.3342%" height="15" fill="rgb(232,182,51)"/><text x="48.7325%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,486 samples, 5.00%)</title><rect x="45.1671%" y="260" width="4.9984%" height="15" fill="rgb(231,60,39)"/><text x="45.4171%" y="270.50">__call..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,577 samples, 5.05%)</title><rect x="45.1223%" y="228" width="5.0463%" height="15" fill="rgb(208,69,12)"/><text x="45.3723%" y="238.50">__call..</text></g><g><title>forward (repeat.py:9) (9,522 samples, 5.02%)</title><rect x="45.1513%" y="244" width="5.0173%" height="15" fill="rgb(235,93,37)"/><text x="45.4013%" y="254.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,796 samples, 5.16%)</title><rect x="45.0085%" y="196" width="5.1617%" height="15" fill="rgb(213,116,39)"/><text x="45.2585%" y="206.50">__call..</text></g><g><title>forward (encoder.py:112) (9,588 samples, 5.05%)</title><rect x="45.1181%" y="212" width="5.0521%" height="15" fill="rgb(222,207,29)"/><text x="45.3681%" y="222.50">forwar..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:304) (9,808 samples, 5.17%)</title><rect x="45.0027%" y="180" width="5.1680%" height="15" fill="rgb(206,96,30)"/><text x="45.2527%" y="190.50">_forwa..</text></g><g><title>make_pad_mask (nets_utils.py:141) (8,430 samples, 4.44%)</title><rect x="50.2740%" y="228" width="4.4419%" height="15" fill="rgb(218,138,4)"/><text x="50.5240%" y="238.50">make_..</text></g><g><title>make_non_pad_mask (nets_utils.py:247) (8,558 samples, 4.51%)</title><rect x="50.2482%" y="212" width="4.5094%" height="15" fill="rgb(250,191,14)"/><text x="50.4982%" y="222.50">make_..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:520) (8,627 samples, 4.55%)</title><rect x="50.2245%" y="196" width="4.5457%" height="15" fill="rgb(239,60,40)"/><text x="50.4745%" y="206.50">_sour..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:315) (8,679 samples, 4.57%)</title><rect x="50.2224%" y="180" width="4.5731%" height="15" fill="rgb(206,27,48)"/><text x="50.4724%" y="190.50">_forw..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (5,707 samples, 3.01%)</title><rect x="55.5385%" y="292" width="3.0071%" height="15" fill="rgb(225,35,8)"/><text x="55.7885%" y="302.50">__c..</text></g><g><title>forward (encoder_layer.py:50) (5,950 samples, 3.14%)</title><rect x="55.4231%" y="276" width="3.1352%" height="15" fill="rgb(250,213,24)"/><text x="55.6731%" y="286.50">for..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (2,157 samples, 1.14%)</title><rect x="59.0146%" y="292" width="1.1366%" height="15" fill="rgb(247,123,22)"/><text x="59.2646%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (2,420 samples, 1.28%)</title><rect x="58.8944%" y="276" width="1.2751%" height="15" fill="rgb(231,138,38)"/><text x="59.1444%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,712 samples, 5.12%)</title><rect x="55.4136%" y="260" width="5.1175%" height="15" fill="rgb(231,145,46)"/><text x="55.6636%" y="270.50">__call..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,943 samples, 5.24%)</title><rect x="55.2945%" y="196" width="5.2392%" height="15" fill="rgb(251,118,11)"/><text x="55.5445%" y="206.50">__call..</text></g><g><title>forward (encoder.py:112) (9,793 samples, 5.16%)</title><rect x="55.3735%" y="212" width="5.1601%" height="15" fill="rgb(217,147,25)"/><text x="55.6235%" y="222.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,787 samples, 5.16%)</title><rect x="55.3767%" y="228" width="5.1570%" height="15" fill="rgb(247,81,37)"/><text x="55.6267%" y="238.50">__call..</text></g><g><title>forward (repeat.py:9) (9,737 samples, 5.13%)</title><rect x="55.4030%" y="244" width="5.1306%" height="15" fill="rgb(209,12,38)"/><text x="55.6530%" y="254.50">forwar..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:328) (9,962 samples, 5.25%)</title><rect x="55.2871%" y="180" width="5.2492%" height="15" fill="rgb(227,1,9)"/><text x="55.5371%" y="190.50">_forwa..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:356) (40,212 samples, 21.19%)</title><rect x="39.3978%" y="164" width="21.1885%" height="15" fill="rgb(248,47,43)"/><text x="39.6478%" y="174.50">forward (e2e_tts_fastspeech_speak..</text></g><g><title>make_pad_mask (nets_utils.py:141) (56,491 samples, 29.77%)</title><rect x="60.6290%" y="196" width="29.7663%" height="15" fill="rgb(221,10,30)"/><text x="60.8790%" y="206.50">make_pad_mask (nets_utils.py:141)</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:360) (56,808 samples, 29.93%)</title><rect x="60.5864%" y="164" width="29.9333%" height="15" fill="rgb(210,229,1)"/><text x="60.8364%" y="174.50">forward (e2e_tts_fastspeech_speakerid.py:360)</text></g><g><title>make_non_pad_mask (nets_utils.py:247) (56,766 samples, 29.91%)</title><rect x="60.6085%" y="180" width="29.9112%" height="15" fill="rgb(222,148,37)"/><text x="60.8585%" y="190.50">make_non_pad_mask (nets_utils.py:247)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (110,204 samples, 58.07%)</title><rect x="33.4463%" y="148" width="58.0687%" height="15" fill="rgb(234,67,33)"/><text x="33.6963%" y="158.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>update_core (tts_speakerid.py:146) (110,283 samples, 58.11%)</title><rect x="33.4062%" y="132" width="58.1104%" height="15" fill="rgb(247,98,35)"/><text x="33.6562%" y="142.50">update_core (tts_speakerid.py:146)</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:32) (9,803 samples, 5.17%)</title><rect x="92.0693%" y="148" width="5.1654%" height="15" fill="rgb(247,138,52)"/><text x="92.3193%" y="158.50">clip_g..</text></g><g><title>norm (torch/tensor.py:252) (9,668 samples, 5.09%)</title><rect x="92.1405%" y="164" width="5.0943%" height="15" fill="rgb(213,79,30)"/><text x="92.3905%" y="174.50">norm (..</text></g><g><title>norm (torch/functional.py:715) (9,620 samples, 5.07%)</title><rect x="92.1657%" y="180" width="5.0690%" height="15" fill="rgb(246,177,23)"/><text x="92.4157%" y="190.50">norm (..</text></g><g><title>update_core (tts_speakerid.py:156) (11,043 samples, 5.82%)</title><rect x="91.9112%" y="132" width="5.8188%" height="15" fill="rgb(230,62,27)"/><text x="92.1612%" y="142.50">update_..</text></g><g><title>update_core (tts_speakerid.py:161) (3,903 samples, 2.06%)</title><rect x="97.7311%" y="132" width="2.0566%" height="15" fill="rgb(216,154,8)"/><text x="97.9811%" y="142.50">u..</text></g><g><title>step (optimizer.py:26) (3,901 samples, 2.06%)</title><rect x="97.7321%" y="148" width="2.0555%" height="15" fill="rgb(244,35,45)"/><text x="97.9821%" y="158.50">s..</text></g><g><title>run (chainer/training/trainer.py:316) (188,387 samples, 99.26%)</title><rect x="0.6349%" y="100" width="99.2649%" height="15" fill="rgb(251,115,12)"/><text x="0.8849%" y="110.50">run (chainer/training/trainer.py:316)</text></g><g><title>update (tts_speakerid.py:166) (188,386 samples, 99.26%)</title><rect x="0.6355%" y="116" width="99.2644%" height="15" fill="rgb(240,54,50)"/><text x="0.8855%" y="126.50">update (tts_speakerid.py:166)</text></g><g><title>&lt;module&gt; (tts_train_speakerid.py:193) (189,426 samples, 99.81%)</title><rect x="0.1855%" y="52" width="99.8124%" height="15" fill="rgb(233,84,52)"/><text x="0.4355%" y="62.50">&lt;module&gt; (tts_train_speakerid.py:193)</text></g><g><title>main (tts_train_speakerid.py:187) (189,305 samples, 99.75%)</title><rect x="0.2492%" y="68" width="99.7487%" height="15" fill="rgb(207,117,47)"/><text x="0.4992%" y="78.50">main (tts_train_speakerid.py:187)</text></g><g><title>train (tts_speakerid.py:487) (188,605 samples, 99.38%)</title><rect x="0.6181%" y="84" width="99.3798%" height="15" fill="rgb(249,43,39)"/><text x="0.8681%" y="94.50">train (tts_speakerid.py:487)</text></g><g><title>all (189,782 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>