<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>train (tts_speakerid.py:343) (342 samples, 1.07%)</title><rect x="1.5845%" y="84" width="1.0667%" height="15" fill="rgb(227,0,7)"/><text x="1.8345%" y="94.50"></text></g><g><title>load (json/__init__.py:299) (341 samples, 1.06%)</title><rect x="1.5876%" y="100" width="1.0636%" height="15" fill="rgb(217,0,24)"/><text x="1.8376%" y="110.50"></text></g><g><title>read (kaldiio/compression_header.py:139) (357 samples, 1.11%)</title><rect x="4.5727%" y="308" width="1.1135%" height="15" fill="rgb(221,193,54)"/><text x="4.8227%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:383) (660 samples, 2.06%)</title><rect x="4.1142%" y="292" width="2.0586%" height="15" fill="rgb(248,212,6)"/><text x="4.3642%" y="302.50">r..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:387) (2,204 samples, 6.87%)</title><rect x="6.2633%" y="292" width="6.8746%" height="15" fill="rgb(208,68,35)"/><text x="6.5133%" y="302.50">read_matr..</text></g><g><title>char_to_float (kaldiio/compression_header.py:226) (384 samples, 1.20%)</title><rect x="14.3075%" y="308" width="1.1978%" height="15" fill="rgb(232,128,0)"/><text x="14.5575%" y="318.50"></text></g><g><title>char_to_float (kaldiio/compression_header.py:227) (340 samples, 1.06%)</title><rect x="15.5053%" y="308" width="1.0605%" height="15" fill="rgb(207,160,47)"/><text x="15.7553%" y="318.50"></text></g><g><title>char_to_float (kaldiio/compression_header.py:228) (1,257 samples, 3.92%)</title><rect x="16.5658%" y="308" width="3.9208%" height="15" fill="rgb(228,23,34)"/><text x="16.8158%" y="318.50">char..</text></g><g><title>char_to_float (kaldiio/compression_header.py:231) (676 samples, 2.11%)</title><rect x="20.5022%" y="308" width="2.1085%" height="15" fill="rgb(218,30,26)"/><text x="20.7522%" y="318.50">c..</text></g><g><title>char_to_float (kaldiio/compression_header.py:232) (392 samples, 1.22%)</title><rect x="22.6107%" y="308" width="1.2227%" height="15" fill="rgb(220,122,19)"/><text x="22.8607%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:393) (4,475 samples, 13.96%)</title><rect x="13.3468%" y="292" width="13.9582%" height="15" fill="rgb(250,228,42)"/><text x="13.5968%" y="302.50">read_matrix_or_vector..</text></g><g><title>char_to_float (kaldiio/compression_header.py:233) (1,113 samples, 3.47%)</title><rect x="23.8334%" y="308" width="3.4716%" height="15" fill="rgb(240,193,28)"/><text x="24.0834%" y="318.50">cha..</text></g><g><title>_load_mat (kaldiio/matio.py:262) (7,538 samples, 23.51%)</title><rect x="3.8054%" y="260" width="23.5122%" height="15" fill="rgb(216,20,37)"/><text x="4.0554%" y="270.50">_load_mat (kaldiio/matio.py:262)</text></g><g><title>read_kaldi (kaldiio/matio.py:339) (7,474 samples, 23.31%)</title><rect x="4.0050%" y="276" width="23.3125%" height="15" fill="rgb(206,188,39)"/><text x="4.2550%" y="286.50">read_kaldi (kaldiio/matio.py:339)</text></g><g><title>__call__ (io_utils_speakerid.py:118) (7,708 samples, 24.04%)</title><rect x="3.2782%" y="212" width="24.0424%" height="15" fill="rgb(217,207,13)"/><text x="3.5282%" y="222.50">__call__ (io_utils_speakerid.py:118)</text></g><g><title>_get_from_loader (io_utils_speakerid.py:464) (7,700 samples, 24.02%)</title><rect x="3.3032%" y="228" width="24.0175%" height="15" fill="rgb(231,73,38)"/><text x="3.5532%" y="238.50">_get_from_loader (io_utils_speakerid.p..</text></g><g><title>load_mat (kaldiio/matio.py:203) (7,563 samples, 23.59%)</title><rect x="3.7305%" y="244" width="23.5901%" height="15" fill="rgb(225,20,46)"/><text x="3.9805%" y="254.50">load_mat (kaldiio/matio.py:203)</text></g><g><title>update_core (tts_speakerid.py:139) (7,892 samples, 24.62%)</title><rect x="3.2502%" y="132" width="24.6163%" height="15" fill="rgb(210,31,41)"/><text x="3.5002%" y="142.50">update_core (tts_speakerid.py:139)</text></g><g><title>__next__ (chainer/iterators/serial_iterator.py:77) (7,889 samples, 24.61%)</title><rect x="3.2595%" y="148" width="24.6070%" height="15" fill="rgb(221,200,47)"/><text x="3.5095%" y="158.50">__next__ (chainer/iterators/serial_iter..</text></g><g><title>&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77) (7,889 samples, 24.61%)</title><rect x="3.2595%" y="164" width="24.6070%" height="15" fill="rgb(226,26,5)"/><text x="3.5095%" y="174.50">&lt;listcomp&gt; (chainer/iterators/serial_it..</text></g><g><title>__getitem__ (chainer/dataset/dataset_mixin.py:67) (7,888 samples, 24.60%)</title><rect x="3.2626%" y="180" width="24.6039%" height="15" fill="rgb(249,33,26)"/><text x="3.5126%" y="190.50">__getitem__ (chainer/dataset/dataset_mi..</text></g><g><title>get_example (chainer/datasets/transform_dataset.py:52) (7,887 samples, 24.60%)</title><rect x="3.2658%" y="196" width="24.6007%" height="15" fill="rgb(235,183,28)"/><text x="3.5158%" y="206.50">get_example (chainer/datasets/transform..</text></g><g><title>__call__ (tts_speakerid.py:224) (2,533 samples, 7.90%)</title><rect x="27.8665%" y="148" width="7.9008%" height="15" fill="rgb(221,5,38)"/><text x="28.1165%" y="158.50">__call__ (t..</text></g><g><title>__call__ (tts_speakerid.py:230) (540 samples, 1.68%)</title><rect x="35.9014%" y="148" width="1.6843%" height="15" fill="rgb(247,18,42)"/><text x="36.1514%" y="158.50"></text></g><g><title>pad_list (nets_utils.py:50) (406 samples, 1.27%)</title><rect x="36.3194%" y="164" width="1.2664%" height="15" fill="rgb(241,131,45)"/><text x="36.5694%" y="174.50"></text></g><g><title>update_core (tts_speakerid.py:140) (3,295 samples, 10.28%)</title><rect x="27.8665%" y="132" width="10.2776%" height="15" fill="rgb(249,31,29)"/><text x="28.1165%" y="142.50">update_core (tt..</text></g><g><title>forward (speakerid.py:108) (385 samples, 1.20%)</title><rect x="39.5165%" y="228" width="1.2009%" height="15" fill="rgb(225,111,53)"/><text x="39.7665%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (385 samples, 1.20%)</title><rect x="39.5165%" y="244" width="1.2009%" height="15" fill="rgb(238,160,17)"/><text x="39.7665%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (385 samples, 1.20%)</title><rect x="39.5165%" y="260" width="1.2009%" height="15" fill="rgb(214,148,48)"/><text x="39.7665%" y="270.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (383 samples, 1.19%)</title><rect x="39.5228%" y="276" width="1.1946%" height="15" fill="rgb(232,36,49)"/><text x="39.7728%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (527 samples, 1.64%)</title><rect x="40.7174%" y="244" width="1.6438%" height="15" fill="rgb(209,103,24)"/><text x="40.9674%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (527 samples, 1.64%)</title><rect x="40.7174%" y="260" width="1.6438%" height="15" fill="rgb(229,88,8)"/><text x="40.9674%" y="270.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (526 samples, 1.64%)</title><rect x="40.7205%" y="276" width="1.6407%" height="15" fill="rgb(213,181,19)"/><text x="40.9705%" y="286.50"></text></g><g><title>forward (speakerid.py:110) (528 samples, 1.65%)</title><rect x="40.7174%" y="228" width="1.6469%" height="15" fill="rgb(254,191,54)"/><text x="40.9674%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,543 samples, 4.81%)</title><rect x="38.4997%" y="212" width="4.8129%" height="15" fill="rgb(241,83,37)"/><text x="38.7497%" y="222.50">__call..</text></g><g><title>forward (speakerid.py:188) (1,546 samples, 4.82%)</title><rect x="38.4966%" y="196" width="4.8222%" height="15" fill="rgb(233,36,39)"/><text x="38.7466%" y="206.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,781 samples, 5.56%)</title><rect x="38.4934%" y="180" width="5.5552%" height="15" fill="rgb(226,3,54)"/><text x="38.7434%" y="190.50">__call_..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:354) (1,785 samples, 5.57%)</title><rect x="38.4903%" y="164" width="5.5677%" height="15" fill="rgb(245,192,40)"/><text x="38.7403%" y="174.50">forward..</text></g><g><title>make_pad_mask (nets_utils.py:142) (1,515 samples, 4.73%)</title><rect x="44.1017%" y="228" width="4.7255%" height="15" fill="rgb(238,167,29)"/><text x="44.3517%" y="238.50">make_p..</text></g><g><title>make_non_pad_mask (nets_utils.py:248) (1,555 samples, 4.85%)</title><rect x="44.0799%" y="212" width="4.8503%" height="15" fill="rgb(232,182,51)"/><text x="44.3299%" y="222.50">make_n..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:520) (1,565 samples, 4.88%)</title><rect x="44.0611%" y="196" width="4.8815%" height="15" fill="rgb(231,60,39)"/><text x="44.3111%" y="206.50">_sourc..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:303) (1,579 samples, 4.93%)</title><rect x="44.0580%" y="180" width="4.9251%" height="15" fill="rgb(208,69,12)"/><text x="44.3080%" y="190.50">_forwa..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (866 samples, 2.70%)</title><rect x="49.3013%" y="292" width="2.7012%" height="15" fill="rgb(235,93,37)"/><text x="49.5513%" y="302.50">__..</text></g><g><title>forward (encoder_layer.py:50) (907 samples, 2.83%)</title><rect x="49.1828%" y="276" width="2.8291%" height="15" fill="rgb(213,116,39)"/><text x="49.4328%" y="286.50">fo..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (383 samples, 1.19%)</title><rect x="52.5016%" y="292" width="1.1946%" height="15" fill="rgb(222,207,29)"/><text x="52.7516%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (421 samples, 1.31%)</title><rect x="52.4017%" y="276" width="1.3132%" height="15" fill="rgb(206,96,30)"/><text x="52.6517%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,567 samples, 4.89%)</title><rect x="49.1703%" y="260" width="4.8877%" height="15" fill="rgb(218,138,4)"/><text x="49.4203%" y="270.50">__call..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,582 samples, 4.93%)</title><rect x="49.1266%" y="228" width="4.9345%" height="15" fill="rgb(250,191,14)"/><text x="49.3766%" y="238.50">__call..</text></g><g><title>forward (repeat.py:9) (1,571 samples, 4.90%)</title><rect x="49.1609%" y="244" width="4.9002%" height="15" fill="rgb(239,60,40)"/><text x="49.4109%" y="254.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,630 samples, 5.08%)</title><rect x="48.9832%" y="196" width="5.0842%" height="15" fill="rgb(206,27,48)"/><text x="49.2332%" y="206.50">__call..</text></g><g><title>forward (encoder.py:112) (1,585 samples, 4.94%)</title><rect x="49.1235%" y="212" width="4.9439%" height="15" fill="rgb(225,35,8)"/><text x="49.3735%" y="222.50">forwar..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:304) (1,631 samples, 5.09%)</title><rect x="48.9832%" y="180" width="5.0873%" height="15" fill="rgb(250,213,24)"/><text x="49.2332%" y="190.50">_forwa..</text></g><g><title>make_pad_mask (nets_utils.py:142) (1,229 samples, 3.83%)</title><rect x="54.2015%" y="228" width="3.8334%" height="15" fill="rgb(247,123,22)"/><text x="54.4515%" y="238.50">make..</text></g><g><title>make_non_pad_mask (nets_utils.py:248) (1,262 samples, 3.94%)</title><rect x="54.1765%" y="212" width="3.9364%" height="15" fill="rgb(231,138,38)"/><text x="54.4265%" y="222.50">make..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:520) (1,275 samples, 3.98%)</title><rect x="54.1578%" y="196" width="3.9769%" height="15" fill="rgb(231,145,46)"/><text x="54.4078%" y="206.50">_sou..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:315) (1,285 samples, 4.01%)</title><rect x="54.1516%" y="180" width="4.0081%" height="15" fill="rgb(251,118,11)"/><text x="54.4016%" y="190.50">_for..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,014 samples, 3.16%)</title><rect x="58.8833%" y="292" width="3.1628%" height="15" fill="rgb(217,147,25)"/><text x="59.1333%" y="302.50">__c..</text></g><g><title>forward (encoder_layer.py:50) (1,047 samples, 3.27%)</title><rect x="58.7991%" y="276" width="3.2658%" height="15" fill="rgb(247,81,37)"/><text x="59.0491%" y="286.50">for..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (365 samples, 1.14%)</title><rect x="62.5328%" y="292" width="1.1385%" height="15" fill="rgb(209,12,38)"/><text x="62.7828%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (406 samples, 1.27%)</title><rect x="62.4173%" y="276" width="1.2664%" height="15" fill="rgb(227,1,9)"/><text x="62.6673%" y="286.50"></text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:328) (1,726 samples, 5.38%)</title><rect x="58.6619%" y="180" width="5.3837%" height="15" fill="rgb(248,47,43)"/><text x="58.9119%" y="190.50">_forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,725 samples, 5.38%)</title><rect x="58.6650%" y="196" width="5.3805%" height="15" fill="rgb(221,10,30)"/><text x="58.9150%" y="206.50">__call_..</text></g><g><title>forward (encoder.py:112) (1,699 samples, 5.30%)</title><rect x="58.7461%" y="212" width="5.2994%" height="15" fill="rgb(210,229,1)"/><text x="58.9961%" y="222.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,698 samples, 5.30%)</title><rect x="58.7492%" y="228" width="5.2963%" height="15" fill="rgb(222,148,37)"/><text x="58.9992%" y="238.50">__call..</text></g><g><title>forward (repeat.py:9) (1,688 samples, 5.27%)</title><rect x="58.7804%" y="244" width="5.2651%" height="15" fill="rgb(234,67,33)"/><text x="59.0304%" y="254.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,686 samples, 5.26%)</title><rect x="58.7867%" y="260" width="5.2589%" height="15" fill="rgb(247,98,35)"/><text x="59.0367%" y="270.50">__call..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:356) (6,418 samples, 20.02%)</title><rect x="44.0580%" y="164" width="20.0187%" height="15" fill="rgb(247,138,52)"/><text x="44.3080%" y="174.50">forward (e2e_tts_fastspeech_spe..</text></g><g><title>make_pad_mask (nets_utils.py:142) (8,543 samples, 26.65%)</title><rect x="64.1173%" y="196" width="26.6469%" height="15" fill="rgb(213,79,30)"/><text x="64.3673%" y="206.50">make_pad_mask (nets_utils.py:142)</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:360) (8,630 samples, 26.92%)</title><rect x="64.0767%" y="164" width="26.9183%" height="15" fill="rgb(246,177,23)"/><text x="64.3267%" y="174.50">forward (e2e_tts_fastspeech_speakerid.py:36..</text></g><g><title>make_non_pad_mask (nets_utils.py:248) (8,620 samples, 26.89%)</title><rect x="64.1079%" y="180" width="26.8871%" height="15" fill="rgb(230,62,27)"/><text x="64.3579%" y="190.50">make_non_pad_mask (nets_utils.py:248)</text></g><g><title>update_core (tts_speakerid.py:146) (17,257 samples, 53.83%)</title><rect x="38.1441%" y="132" width="53.8272%" height="15" fill="rgb(216,154,8)"/><text x="38.3941%" y="142.50">update_core (tts_speakerid.py:146)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (17,245 samples, 53.79%)</title><rect x="38.1815%" y="148" width="53.7898%" height="15" fill="rgb(244,35,45)"/><text x="38.4315%" y="158.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:32) (1,485 samples, 4.63%)</title><rect x="92.5671%" y="148" width="4.6319%" height="15" fill="rgb(251,115,12)"/><text x="92.8171%" y="158.50">clip_..</text></g><g><title>norm (torch/tensor.py:252) (1,465 samples, 4.57%)</title><rect x="92.6294%" y="164" width="4.5696%" height="15" fill="rgb(240,54,50)"/><text x="92.8794%" y="174.50">norm ..</text></g><g><title>norm (torch/functional.py:715) (1,457 samples, 4.54%)</title><rect x="92.6544%" y="180" width="4.5446%" height="15" fill="rgb(233,84,52)"/><text x="92.9044%" y="190.50">norm ..</text></g><g><title>update_core (tts_speakerid.py:156) (1,739 samples, 5.42%)</title><rect x="92.3893%" y="132" width="5.4242%" height="15" fill="rgb(207,117,47)"/><text x="92.6393%" y="142.50">update_..</text></g><g><title>update_core (tts_speakerid.py:161) (639 samples, 1.99%)</title><rect x="97.8135%" y="132" width="1.9931%" height="15" fill="rgb(249,43,39)"/><text x="98.0635%" y="142.50">u..</text></g><g><title>step (optimizer.py:26) (639 samples, 1.99%)</title><rect x="97.8135%" y="148" width="1.9931%" height="15" fill="rgb(209,38,44)"/><text x="98.0635%" y="158.50">s..</text></g><g><title>update (tts_speakerid.py:166) (31,058 samples, 96.87%)</title><rect x="3.0037%" y="116" width="96.8746%" height="15" fill="rgb(236,212,23)"/><text x="3.2537%" y="126.50">update (tts_speakerid.py:166)</text></g><g><title>run (chainer/training/trainer.py:316) (31,059 samples, 96.88%)</title><rect x="3.0037%" y="100" width="96.8777%" height="15" fill="rgb(242,79,21)"/><text x="3.2537%" y="110.50">run (chainer/training/trainer.py:316)</text></g><g><title>&lt;module&gt; (tts_train_speakerid.py:193) (31,965 samples, 99.70%)</title><rect x="0.2932%" y="52" width="99.7037%" height="15" fill="rgb(211,96,35)"/><text x="0.5432%" y="62.50">&lt;module&gt; (tts_train_speakerid.py:193)</text></g><g><title>main (tts_train_speakerid.py:187) (31,843 samples, 99.32%)</title><rect x="0.6737%" y="68" width="99.3231%" height="15" fill="rgb(253,215,40)"/><text x="0.9237%" y="78.50">main (tts_train_speakerid.py:187)</text></g><g><title>train (tts_speakerid.py:487) (31,101 samples, 97.01%)</title><rect x="2.9881%" y="84" width="97.0087%" height="15" fill="rgb(211,81,21)"/><text x="3.2381%" y="94.50">train (tts_speakerid.py:487)</text></g><g><title>all (32,060 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>