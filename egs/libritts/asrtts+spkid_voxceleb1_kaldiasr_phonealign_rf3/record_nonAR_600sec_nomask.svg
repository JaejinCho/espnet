<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>_apply (torch/nn/modules/module.py:193) (581 samples, 1.77%)</title><rect x="1.1651%" y="164" width="1.7674%" height="15" fill="rgb(227,0,7)"/><text x="1.4151%" y="174.50"></text></g><g><title>convert (torch/nn/modules/module.py:379) (581 samples, 1.77%)</title><rect x="1.1651%" y="180" width="1.7674%" height="15" fill="rgb(217,0,24)"/><text x="1.4151%" y="190.50"></text></g><g><title>_apply (torch/nn/modules/module.py:187) (605 samples, 1.84%)</title><rect x="1.0951%" y="132" width="1.8404%" height="15" fill="rgb(221,193,54)"/><text x="1.3451%" y="142.50">_..</text></g><g><title>_apply (torch/nn/modules/module.py:187) (605 samples, 1.84%)</title><rect x="1.0951%" y="148" width="1.8404%" height="15" fill="rgb(248,212,6)"/><text x="1.3451%" y="158.50">_..</text></g><g><title>train (tts_speakerid.py:324) (606 samples, 1.84%)</title><rect x="1.0951%" y="84" width="1.8434%" height="15" fill="rgb(208,68,35)"/><text x="1.3451%" y="94.50">t..</text></g><g><title>to (torch/nn/modules/module.py:381) (606 samples, 1.84%)</title><rect x="1.0951%" y="100" width="1.8434%" height="15" fill="rgb(232,128,0)"/><text x="1.3451%" y="110.50">t..</text></g><g><title>_apply (torch/nn/modules/module.py:187) (606 samples, 1.84%)</title><rect x="1.0951%" y="116" width="1.8434%" height="15" fill="rgb(207,160,47)"/><text x="1.3451%" y="126.50">_..</text></g><g><title>loads (json/__init__.py:349) (597 samples, 1.82%)</title><rect x="2.9476%" y="116" width="1.8160%" height="15" fill="rgb(228,23,34)"/><text x="3.1976%" y="126.50">l..</text></g><g><title>train (tts_speakerid.py:343) (919 samples, 2.80%)</title><rect x="2.9415%" y="84" width="2.7955%" height="15" fill="rgb(218,30,26)"/><text x="3.1915%" y="94.50">tr..</text></g><g><title>load (json/__init__.py:299) (919 samples, 2.80%)</title><rect x="2.9415%" y="100" width="2.7955%" height="15" fill="rgb(220,122,19)"/><text x="3.1915%" y="110.50">lo..</text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:387) (843 samples, 2.56%)</title><rect x="8.4261%" y="292" width="2.5643%" height="15" fill="rgb(250,228,42)"/><text x="8.6761%" y="302.50">re..</text></g><g><title>char_to_float (kaldiio/compression_header.py:228) (390 samples, 1.19%)</title><rect x="12.3350%" y="308" width="1.1863%" height="15" fill="rgb(240,193,28)"/><text x="12.5850%" y="318.50"></text></g><g><title>read_matrix_or_vector (kaldiio/matio.py:393) (2,388 samples, 7.26%)</title><rect x="11.0635%" y="292" width="7.2641%" height="15" fill="rgb(216,20,37)"/><text x="11.3135%" y="302.50">read_matri..</text></g><g><title>char_to_float (kaldiio/compression_header.py:233) (974 samples, 2.96%)</title><rect x="15.3647%" y="308" width="2.9628%" height="15" fill="rgb(206,188,39)"/><text x="15.6147%" y="318.50">cha..</text></g><g><title>_load_mat (kaldiio/matio.py:262) (3,642 samples, 11.08%)</title><rect x="7.2580%" y="260" width="11.0787%" height="15" fill="rgb(217,207,13)"/><text x="7.5080%" y="270.50">_load_mat (kaldi..</text></g><g><title>read_kaldi (kaldiio/matio.py:339) (3,502 samples, 10.65%)</title><rect x="7.6839%" y="276" width="10.6528%" height="15" fill="rgb(231,73,38)"/><text x="7.9339%" y="286.50">read_kaldi (kald..</text></g><g><title>__call__ (io_utils_speakerid.py:118) (3,867 samples, 11.76%)</title><rect x="6.5766%" y="212" width="11.7631%" height="15" fill="rgb(225,20,46)"/><text x="6.8266%" y="222.50">__call__ (io_util..</text></g><g><title>_get_from_loader (io_utils_speakerid.py:464) (3,863 samples, 11.75%)</title><rect x="6.5888%" y="228" width="11.7509%" height="15" fill="rgb(210,31,41)"/><text x="6.8388%" y="238.50">_get_from_loader ..</text></g><g><title>load_mat (kaldiio/matio.py:203) (3,664 samples, 11.15%)</title><rect x="7.1941%" y="244" width="11.1456%" height="15" fill="rgb(221,200,47)"/><text x="7.4441%" y="254.50">load_mat (kaldii..</text></g><g><title>update_core (tts_speakerid.py:139) (4,051 samples, 12.32%)</title><rect x="6.5401%" y="132" width="12.3228%" height="15" fill="rgb(226,26,5)"/><text x="6.7901%" y="142.50">update_core (tts_s..</text></g><g><title>__next__ (chainer/iterators/serial_iterator.py:77) (4,048 samples, 12.31%)</title><rect x="6.5492%" y="148" width="12.3137%" height="15" fill="rgb(249,33,26)"/><text x="6.7992%" y="158.50">__next__ (chainer/..</text></g><g><title>&lt;listcomp&gt; (chainer/iterators/serial_iterator.py:77) (4,047 samples, 12.31%)</title><rect x="6.5523%" y="164" width="12.3106%" height="15" fill="rgb(235,183,28)"/><text x="6.8023%" y="174.50">&lt;listcomp&gt; (chaine..</text></g><g><title>__getitem__ (chainer/dataset/dataset_mixin.py:67) (4,044 samples, 12.30%)</title><rect x="6.5614%" y="180" width="12.3015%" height="15" fill="rgb(221,5,38)"/><text x="6.8114%" y="190.50">__getitem__ (chain..</text></g><g><title>get_example (chainer/datasets/transform_dataset.py:52) (4,043 samples, 12.30%)</title><rect x="6.5645%" y="196" width="12.2985%" height="15" fill="rgb(247,18,42)"/><text x="6.8145%" y="206.50">get_example (chain..</text></g><g><title>__call__ (tts_speakerid.py:224) (4,976 samples, 15.14%)</title><rect x="18.8660%" y="148" width="15.1366%" height="15" fill="rgb(241,131,45)"/><text x="19.1160%" y="158.50">__call__ (tts_speakerid..</text></g><g><title>__call__ (tts_speakerid.py:230) (797 samples, 2.42%)</title><rect x="34.1881%" y="148" width="2.4244%" height="15" fill="rgb(249,31,29)"/><text x="34.4381%" y="158.50">__..</text></g><g><title>pad_list (nets_utils.py:50) (599 samples, 1.82%)</title><rect x="34.7904%" y="164" width="1.8221%" height="15" fill="rgb(225,111,53)"/><text x="35.0404%" y="174.50">p..</text></g><g><title>update_core (tts_speakerid.py:140) (6,000 samples, 18.25%)</title><rect x="18.8629%" y="132" width="18.2515%" height="15" fill="rgb(238,160,17)"/><text x="19.1129%" y="142.50">update_core (tts_speakerid.p..</text></g><g><title>forward (speakerid.py:108) (365 samples, 1.11%)</title><rect x="38.6810%" y="228" width="1.1103%" height="15" fill="rgb(214,148,48)"/><text x="38.9310%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (364 samples, 1.11%)</title><rect x="38.6841%" y="244" width="1.1073%" height="15" fill="rgb(232,36,49)"/><text x="38.9341%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (363 samples, 1.10%)</title><rect x="38.6871%" y="260" width="1.1042%" height="15" fill="rgb(209,103,24)"/><text x="38.9371%" y="270.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (359 samples, 1.09%)</title><rect x="38.6993%" y="276" width="1.0920%" height="15" fill="rgb(229,88,8)"/><text x="38.9493%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (524 samples, 1.59%)</title><rect x="39.8187%" y="276" width="1.5940%" height="15" fill="rgb(213,181,19)"/><text x="40.0687%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (534 samples, 1.62%)</title><rect x="39.7913%" y="244" width="1.6244%" height="15" fill="rgb(254,191,54)"/><text x="40.0413%" y="254.50"></text></g><g><title>forward (torch/nn/modules/container.py:92) (534 samples, 1.62%)</title><rect x="39.7913%" y="260" width="1.6244%" height="15" fill="rgb(241,83,37)"/><text x="40.0413%" y="270.50"></text></g><g><title>forward (speakerid.py:110) (535 samples, 1.63%)</title><rect x="39.7913%" y="228" width="1.6274%" height="15" fill="rgb(233,36,39)"/><text x="40.0413%" y="238.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,589 samples, 4.83%)</title><rect x="37.4703%" y="212" width="4.8336%" height="15" fill="rgb(226,3,54)"/><text x="37.7203%" y="222.50">__call..</text></g><g><title>forward (speakerid.py:188) (1,593 samples, 4.85%)</title><rect x="37.4643%" y="196" width="4.8458%" height="15" fill="rgb(245,192,40)"/><text x="37.7143%" y="206.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,834 samples, 5.58%)</title><rect x="37.4582%" y="180" width="5.5789%" height="15" fill="rgb(238,167,29)"/><text x="37.7082%" y="190.50">__call_..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:354) (1,843 samples, 5.61%)</title><rect x="37.4490%" y="164" width="5.6063%" height="15" fill="rgb(232,182,51)"/><text x="37.6990%" y="174.50">forward..</text></g><g><title>make_pad_mask (nets_utils.py:141) (1,650 samples, 5.02%)</title><rect x="43.1101%" y="228" width="5.0192%" height="15" fill="rgb(231,60,39)"/><text x="43.3601%" y="238.50">make_p..</text></g><g><title>make_non_pad_mask (nets_utils.py:247) (1,677 samples, 5.10%)</title><rect x="43.0918%" y="212" width="5.1013%" height="15" fill="rgb(208,69,12)"/><text x="43.3418%" y="222.50">make_n..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:518) (1,689 samples, 5.14%)</title><rect x="43.0614%" y="196" width="5.1378%" height="15" fill="rgb(235,93,37)"/><text x="43.3114%" y="206.50">_sourc..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:303) (1,699 samples, 5.17%)</title><rect x="43.0583%" y="180" width="5.1682%" height="15" fill="rgb(213,116,39)"/><text x="43.3083%" y="190.50">_forwa..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (850 samples, 2.59%)</title><rect x="48.4943%" y="292" width="2.5856%" height="15" fill="rgb(222,207,29)"/><text x="48.7443%" y="302.50">__..</text></g><g><title>forward (encoder_layer.py:50) (879 samples, 2.67%)</title><rect x="48.4152%" y="276" width="2.6738%" height="15" fill="rgb(206,96,30)"/><text x="48.6652%" y="286.50">fo..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (399 samples, 1.21%)</title><rect x="51.5362%" y="292" width="1.2137%" height="15" fill="rgb(218,138,4)"/><text x="51.7862%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (453 samples, 1.38%)</title><rect x="51.3932%" y="276" width="1.3780%" height="15" fill="rgb(250,191,14)"/><text x="51.6432%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,564 samples, 4.76%)</title><rect x="48.4091%" y="260" width="4.7576%" height="15" fill="rgb(239,60,40)"/><text x="48.6591%" y="270.50">__call..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,624 samples, 4.94%)</title><rect x="48.2296%" y="196" width="4.9401%" height="15" fill="rgb(206,27,48)"/><text x="48.4796%" y="206.50">__call..</text></g><g><title>forward (encoder.py:112) (1,584 samples, 4.82%)</title><rect x="48.3513%" y="212" width="4.8184%" height="15" fill="rgb(225,35,8)"/><text x="48.6013%" y="222.50">forwar..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,581 samples, 4.81%)</title><rect x="48.3604%" y="228" width="4.8093%" height="15" fill="rgb(250,213,24)"/><text x="48.6104%" y="238.50">__call..</text></g><g><title>forward (repeat.py:9) (1,572 samples, 4.78%)</title><rect x="48.3878%" y="244" width="4.7819%" height="15" fill="rgb(247,123,22)"/><text x="48.6378%" y="254.50">forwar..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:304) (1,626 samples, 4.95%)</title><rect x="48.2266%" y="180" width="4.9462%" height="15" fill="rgb(231,138,38)"/><text x="48.4766%" y="190.50">_forwa..</text></g><g><title>make_pad_mask (nets_utils.py:141) (1,318 samples, 4.01%)</title><rect x="53.3005%" y="228" width="4.0092%" height="15" fill="rgb(231,145,46)"/><text x="53.5505%" y="238.50">make..</text></g><g><title>make_non_pad_mask (nets_utils.py:247) (1,353 samples, 4.12%)</title><rect x="53.2640%" y="212" width="4.1157%" height="15" fill="rgb(251,118,11)"/><text x="53.5140%" y="222.50">make..</text></g><g><title>_source_mask (e2e_tts_fastspeech_speakerid.py:518) (1,364 samples, 4.15%)</title><rect x="53.2336%" y="196" width="4.1492%" height="15" fill="rgb(217,147,25)"/><text x="53.4836%" y="206.50">_sour..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:315) (1,375 samples, 4.18%)</title><rect x="53.2336%" y="180" width="4.1826%" height="15" fill="rgb(247,81,37)"/><text x="53.4836%" y="190.50">_forw..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,115 samples, 3.39%)</title><rect x="58.1463%" y="292" width="3.3917%" height="15" fill="rgb(209,12,38)"/><text x="58.3963%" y="302.50">__c..</text></g><g><title>forward (encoder_layer.py:50) (1,152 samples, 3.50%)</title><rect x="58.0611%" y="276" width="3.5043%" height="15" fill="rgb(227,1,9)"/><text x="58.3111%" y="286.50">for..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (358 samples, 1.09%)</title><rect x="62.0430%" y="292" width="1.0890%" height="15" fill="rgb(248,47,43)"/><text x="62.2930%" y="302.50"></text></g><g><title>forward (encoder_layer.py:57) (393 samples, 1.20%)</title><rect x="61.9456%" y="276" width="1.1955%" height="15" fill="rgb(221,10,30)"/><text x="62.1956%" y="286.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,847 samples, 5.62%)</title><rect x="57.8816%" y="196" width="5.6184%" height="15" fill="rgb(210,229,1)"/><text x="58.1316%" y="206.50">__call_..</text></g><g><title>forward (encoder.py:112) (1,806 samples, 5.49%)</title><rect x="58.0063%" y="212" width="5.4937%" height="15" fill="rgb(222,148,37)"/><text x="58.2563%" y="222.50">forward..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,805 samples, 5.49%)</title><rect x="58.0094%" y="228" width="5.4907%" height="15" fill="rgb(234,67,33)"/><text x="58.2594%" y="238.50">__call_..</text></g><g><title>forward (repeat.py:9) (1,796 samples, 5.46%)</title><rect x="58.0367%" y="244" width="5.4633%" height="15" fill="rgb(247,98,35)"/><text x="58.2867%" y="254.50">forward..</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (1,793 samples, 5.45%)</title><rect x="58.0459%" y="260" width="5.4542%" height="15" fill="rgb(247,138,52)"/><text x="58.2959%" y="270.50">__call_..</text></g><g><title>_forward (e2e_tts_fastspeech_speakerid.py:328) (1,851 samples, 5.63%)</title><rect x="57.8725%" y="180" width="5.6306%" height="15" fill="rgb(213,79,30)"/><text x="58.1225%" y="190.50">_forwar..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:356) (6,736 samples, 20.49%)</title><rect x="43.0553%" y="164" width="20.4904%" height="15" fill="rgb(246,177,23)"/><text x="43.3053%" y="174.50">forward (e2e_tts_fastspeech_spea..</text></g><g><title>forward (e2e_tts_fastspeech_speakerid.py:367) (9,003 samples, 27.39%)</title><rect x="63.5457%" y="164" width="27.3864%" height="15" fill="rgb(230,62,27)"/><text x="63.7957%" y="174.50">forward (e2e_tts_fastspeech_speakerid.py:367)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (9,003 samples, 27.39%)</title><rect x="63.5457%" y="180" width="27.3864%" height="15" fill="rgb(216,154,8)"/><text x="63.7957%" y="190.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>forward (torch/nn/modules/loss.py:93) (9,003 samples, 27.39%)</title><rect x="63.5457%" y="196" width="27.3864%" height="15" fill="rgb(244,35,45)"/><text x="63.7957%" y="206.50">forward (torch/nn/modules/loss.py:93)</text></g><g><title>l1_loss (torch/nn/functional.py:2135) (9,001 samples, 27.38%)</title><rect x="63.5517%" y="212" width="27.3803%" height="15" fill="rgb(251,115,12)"/><text x="63.8017%" y="222.50">l1_loss (torch/nn/functional.py:2135)</text></g><g><title>update_core (tts_speakerid.py:146) (17,940 samples, 54.57%)</title><rect x="37.1175%" y="132" width="54.5720%" height="15" fill="rgb(240,54,50)"/><text x="37.3675%" y="142.50">update_core (tts_speakerid.py:146)</text></g><g><title>__call__ (torch/nn/modules/module.py:489) (17,925 samples, 54.53%)</title><rect x="37.1631%" y="148" width="54.5264%" height="15" fill="rgb(233,84,52)"/><text x="37.4131%" y="158.50">__call__ (torch/nn/modules/module.py:489)</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:32) (1,525 samples, 4.64%)</title><rect x="92.4560%" y="148" width="4.6389%" height="15" fill="rgb(207,117,47)"/><text x="92.7060%" y="158.50">clip_..</text></g><g><title>norm (torch/tensor.py:252) (1,496 samples, 4.55%)</title><rect x="92.5443%" y="164" width="4.5507%" height="15" fill="rgb(249,43,39)"/><text x="92.7943%" y="174.50">norm ..</text></g><g><title>norm (torch/functional.py:715) (1,486 samples, 4.52%)</title><rect x="92.5747%" y="180" width="4.5203%" height="15" fill="rgb(209,38,44)"/><text x="92.8247%" y="190.50">norm ..</text></g><g><title>update_core (tts_speakerid.py:156) (1,765 samples, 5.37%)</title><rect x="92.2796%" y="132" width="5.3690%" height="15" fill="rgb(236,212,23)"/><text x="92.5296%" y="142.50">update_..</text></g><g><title>update_core (tts_speakerid.py:161) (702 samples, 2.14%)</title><rect x="97.6486%" y="132" width="2.1354%" height="15" fill="rgb(242,79,21)"/><text x="97.8986%" y="142.50">u..</text></g><g><title>step (optimizer.py:26) (702 samples, 2.14%)</title><rect x="97.6486%" y="148" width="2.1354%" height="15" fill="rgb(211,96,35)"/><text x="97.8986%" y="158.50">s..</text></g><g><title>update (tts_speakerid.py:166) (30,782 samples, 93.64%)</title><rect x="6.2298%" y="116" width="93.6363%" height="15" fill="rgb(253,215,40)"/><text x="6.4798%" y="126.50">update (tts_speakerid.py:166)</text></g><g><title>run (chainer/training/trainer.py:316) (30,783 samples, 93.64%)</title><rect x="6.2298%" y="100" width="93.6394%" height="15" fill="rgb(211,81,21)"/><text x="6.4798%" y="110.50">run (chainer/training/trainer.py:316)</text></g><g><title>&lt;module&gt; (tts_train_speakerid.py:193) (32,752 samples, 99.63%)</title><rect x="0.3589%" y="52" width="99.6289%" height="15" fill="rgb(208,190,38)"/><text x="0.6089%" y="62.50">&lt;module&gt; (tts_train_speakerid.py:193)</text></g><g><title>main (tts_train_speakerid.py:187) (32,634 samples, 99.27%)</title><rect x="0.7179%" y="68" width="99.2699%" height="15" fill="rgb(235,213,38)"/><text x="0.9679%" y="78.50">main (tts_train_speakerid.py:187)</text></g><g><title>train (tts_speakerid.py:487) (30,825 samples, 93.77%)</title><rect x="6.2207%" y="84" width="93.7671%" height="15" fill="rgb(237,122,38)"/><text x="6.4707%" y="94.50">train (tts_speakerid.py:487)</text></g><g><title>all (32,874 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>