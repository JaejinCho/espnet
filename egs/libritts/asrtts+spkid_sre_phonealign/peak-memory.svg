<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="852" onload="init(evt)" viewBox="0 0 1200 852" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:"mono"; font-size:16px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:21px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript">
        <![CDATA[var nametype = 'Function:';
var fontsize = 16;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]>
        <![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]>
    </script>
    <rect x="0" y="0" width="100%" height="852" fill="url(#background)"/>
    <text id="title" x="50.0000%" y="32.00">Peak Tracked Memory Usage (11047.4 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil memory profiler. <a href="https://pythonspeed.com/products/filmemoryprofiler/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" x="10" y="32.00">Reset Zoom</text>
    <text id="search" x="1090" y="32.00">Search</text>
    <text id="matched" x="1090" y="839.00"> </text>
    <svg id="frames" x="10" width="1180">
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:219 (_call_with_frames_removed) (15,921,805 bytes, 0.14%)</title>
            <rect x="0.0940%" y="342" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="355.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,921,805 bytes, 0.14%)</title>
            <rect x="0.0940%" y="364" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="377.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/nets/tts_interface.py:8 (&lt;module&gt;) (15,913,661 bytes, 0.14%)</title>
            <rect x="0.0941%" y="386" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="399.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;import chainer (15,913,661 bytes, 0.14%)</title>
            <rect x="0.0941%" y="408" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="421.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:971 (_find_and_load) (15,913,661 bytes, 0.14%)</title>
            <rect x="0.0941%" y="430" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="443.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,913,661 bytes, 0.14%)</title>
            <rect x="0.0941%" y="452" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="465.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:955 (_find_and_load_unlocked) (15,913,145 bytes, 0.14%)</title>
            <rect x="0.0941%" y="474" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="487.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,913,145 bytes, 0.14%)</title>
            <rect x="0.0941%" y="496" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="509.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:665 (_load_unlocked) (15,912,397 bytes, 0.14%)</title>
            <rect x="0.0941%" y="518" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="531.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,912,397 bytes, 0.14%)</title>
            <rect x="0.0941%" y="540" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3441%" y="553.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:678 (exec_module) (15,886,421 bytes, 0.14%)</title>
            <rect x="0.0943%" y="562" width="0.1371%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3443%" y="575.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,886,421 bytes, 0.14%)</title>
            <rect x="0.0943%" y="584" width="0.1371%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3443%" y="597.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:219 (_call_with_frames_removed) (15,885,941 bytes, 0.14%)</title>
            <rect x="0.0943%" y="606" width="0.1371%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3443%" y="619.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,885,941 bytes, 0.14%)</title>
            <rect x="0.0943%" y="628" width="0.1371%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3443%" y="641.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:955 (_find_and_load_unlocked) (15,928,745 bytes, 0.14%)</title>
            <rect x="0.0940%" y="210" width="0.1375%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="223.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,928,745 bytes, 0.14%)</title>
            <rect x="0.0940%" y="232" width="0.1375%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="245.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:665 (_load_unlocked) (15,928,479 bytes, 0.14%)</title>
            <rect x="0.0940%" y="254" width="0.1375%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="267.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,928,479 bytes, 0.14%)</title>
            <rect x="0.0940%" y="276" width="0.1375%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:678 (exec_module) (15,921,829 bytes, 0.14%)</title>
            <rect x="0.0940%" y="298" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="311.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,921,829 bytes, 0.14%)</title>
            <rect x="0.0940%" y="320" width="0.1374%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.3440%" y="333.50"></text>
        </g>
        <g>
            <title>../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:20 (&lt;module&gt;) (19,782,659 bytes, 0.17%)</title>
            <rect x="0.0607%" y="122" width="0.1708%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.3107%" y="135.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;from espnet.nets.tts_interface import TTSInterface (19,782,659 bytes, 0.17%)</title>
            <rect x="0.0607%" y="144" width="0.1708%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.3107%" y="157.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:971 (_find_and_load) (19,782,659 bytes, 0.17%)</title>
            <rect x="0.0607%" y="166" width="0.1708%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.3107%" y="179.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (19,782,659 bytes, 0.17%)</title>
            <rect x="0.0607%" y="188" width="0.1708%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.3107%" y="201.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/nets/pytorch_backend/e2e_tts_forwardtacotron2_speakerid_update_fullyunsync_semi.py:20 (&lt;module&gt;) (18,329,645 bytes, 0.16%)</title>
            <rect x="0.2369%" y="562" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="575.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;import torch (18,329,645 bytes, 0.16%)</title>
            <rect x="0.2369%" y="584" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="597.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:971 (_find_and_load) (18,329,645 bytes, 0.16%)</title>
            <rect x="0.2369%" y="606" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="619.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (18,329,645 bytes, 0.16%)</title>
            <rect x="0.2369%" y="628" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="641.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:955 (_find_and_load_unlocked) (18,329,029 bytes, 0.16%)</title>
            <rect x="0.2369%" y="650" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="663.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (18,329,029 bytes, 0.16%)</title>
            <rect x="0.2369%" y="672" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4869%" y="685.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:665 (_load_unlocked) (18,328,739 bytes, 0.16%)</title>
            <rect x="0.2370%" y="694" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="707.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (18,328,739 bytes, 0.16%)</title>
            <rect x="0.2370%" y="716" width="0.1582%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="729.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:678 (exec_module) (18,318,920 bytes, 0.16%)</title>
            <rect x="0.2370%" y="738" width="0.1581%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="751.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (18,318,920 bytes, 0.16%)</title>
            <rect x="0.2370%" y="760" width="0.1581%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="773.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:219 (_call_with_frames_removed) (18,318,920 bytes, 0.16%)</title>
            <rect x="0.2370%" y="782" width="0.1581%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="795.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (18,318,920 bytes, 0.16%)</title>
            <rect x="0.2370%" y="804" width="0.1581%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.4870%" y="817.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:955 (_find_and_load_unlocked) (15,532,248 bytes, 0.13%)</title>
            <rect x="0.3980%" y="650" width="0.1341%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6480%" y="663.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,532,248 bytes, 0.13%)</title>
            <rect x="0.3980%" y="672" width="0.1341%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6480%" y="685.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:665 (_load_unlocked) (15,531,926 bytes, 0.13%)</title>
            <rect x="0.3980%" y="694" width="0.1341%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6480%" y="707.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,531,926 bytes, 0.13%)</title>
            <rect x="0.3980%" y="716" width="0.1341%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6480%" y="729.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:678 (exec_module) (15,505,988 bytes, 0.13%)</title>
            <rect x="0.3982%" y="738" width="0.1339%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6482%" y="751.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,505,988 bytes, 0.13%)</title>
            <rect x="0.3982%" y="760" width="0.1339%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6482%" y="773.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:219 (_call_with_frames_removed) (15,505,988 bytes, 0.13%)</title>
            <rect x="0.3982%" y="782" width="0.1339%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6482%" y="795.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,505,988 bytes, 0.13%)</title>
            <rect x="0.3982%" y="804" width="0.1339%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6482%" y="817.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/nets/pytorch_backend/e2e_tts_forwardtacotron2_speakerid_update_fullyunsync_semi.py:35 (&lt;module&gt;) (15,549,217 bytes, 0.13%)</title>
            <rect x="0.3978%" y="562" width="0.1342%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6478%" y="575.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;from utils.speakerid import E2E_speakerid, AngleLoss (15,549,217 bytes, 0.13%)</title>
            <rect x="0.3978%" y="584" width="0.1342%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6478%" y="597.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:971 (_find_and_load) (15,549,217 bytes, 0.13%)</title>
            <rect x="0.3978%" y="606" width="0.1342%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6478%" y="619.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (15,549,217 bytes, 0.13%)</title>
            <rect x="0.3978%" y="628" width="0.1342%" height="21" fill="rgb(255,244,244)"/>
            <text x="0.6478%" y="641.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:955 (_find_and_load_unlocked) (34,233,921 bytes, 0.30%)</title>
            <rect x="0.2365%" y="386" width="0.2955%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4865%" y="399.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,233,921 bytes, 0.30%)</title>
            <rect x="0.2365%" y="408" width="0.2955%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4865%" y="421.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:665 (_load_unlocked) (34,233,578 bytes, 0.30%)</title>
            <rect x="0.2365%" y="430" width="0.2955%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4865%" y="443.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,233,578 bytes, 0.30%)</title>
            <rect x="0.2365%" y="452" width="0.2955%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4865%" y="465.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:678 (exec_module) (34,188,467 bytes, 0.30%)</title>
            <rect x="0.2369%" y="474" width="0.2951%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4869%" y="487.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,188,467 bytes, 0.30%)</title>
            <rect x="0.2369%" y="496" width="0.2951%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4869%" y="509.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:219 (_call_with_frames_removed) (34,188,467 bytes, 0.30%)</title>
            <rect x="0.2369%" y="518" width="0.2951%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4869%" y="531.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,188,467 bytes, 0.30%)</title>
            <rect x="0.2369%" y="540" width="0.2951%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4869%" y="553.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/importlib/__init__.py:126 (import_module) (34,245,449 bytes, 0.30%)</title>
            <rect x="0.2364%" y="254" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="267.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return _bootstrap._gcd_import(name[level:], package, level) (34,245,449 bytes, 0.30%)</title>
            <rect x="0.2364%" y="276" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:994 (_gcd_import) (34,244,961 bytes, 0.30%)</title>
            <rect x="0.2364%" y="298" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="311.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,244,961 bytes, 0.30%)</title>
            <rect x="0.2364%" y="320" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="333.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:971 (_find_and_load) (34,244,961 bytes, 0.30%)</title>
            <rect x="0.2364%" y="342" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="355.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160; (34,244,961 bytes, 0.30%)</title>
            <rect x="0.2364%" y="364" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="377.50"></text>
        </g>
        <g>
            <title>../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:151 (main) (34,246,112 bytes, 0.30%)</title>
            <rect x="0.2364%" y="166" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="179.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;model_class = dynamic_import(args.model_module) (34,246,112 bytes, 0.30%)</title>
            <rect x="0.2364%" y="188" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="201.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/utils/dynamic_import.py:21 (dynamic_import) (34,245,473 bytes, 0.30%)</title>
            <rect x="0.2364%" y="210" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="223.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;m = importlib.import_module(module_name) (34,245,473 bytes, 0.30%)</title>
            <rect x="0.2364%" y="232" width="0.2956%" height="21" fill="rgb(255,241,241)"/>
            <text x="0.4864%" y="245.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:278 (train) (21,877,572 bytes, 0.19%)</title>
            <rect x="0.5379%" y="210" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="223.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;valid_json = json.load(f)['utts'] (21,877,572 bytes, 0.19%)</title>
            <rect x="0.5379%" y="232" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="245.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:299 (load) (21,877,028 bytes, 0.19%)</title>
            <rect x="0.5379%" y="254" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="267.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw) (21,877,028 bytes, 0.19%)</title>
            <rect x="0.5379%" y="276" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="289.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:354 (loads) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="298" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="311.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return _default_decoder.decode(s) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="320" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="333.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:339 (decode) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="342" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="355.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.raw_decode(s, idx=_w(s, 0).end()) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="364" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="377.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:355 (raw_decode) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="386" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="399.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.scan_once(s, idx) (21,876,492 bytes, 0.19%)</title>
            <rect x="0.5379%" y="408" width="0.1889%" height="21" fill="rgb(255,243,243)"/>
            <text x="0.7879%" y="421.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/module.py:193 (_apply) (1,023,955,252 bytes, 8.84%)</title>
            <rect x="0.7359%" y="386" width="8.8394%" height="21" fill="rgb(255,205,205)"/>
            <text x="0.9859%" y="399.50">/export/b..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;param.data = fn(param.data) (1,023,955,252 bytes, 8.84%)</title>
            <rect x="0.7359%" y="408" width="8.8394%" height="21" fill="rgb(255,205,205)"/>
            <text x="0.9859%" y="421.50">TB@@/expo..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/module.py:379 (convert) (1,023,954,756 bytes, 8.84%)</title>
            <rect x="0.7359%" y="430" width="8.8394%" height="21" fill="rgb(255,205,205)"/>
            <text x="0.9859%" y="443.50">/export/b..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return t.to(device, dtype if t.is_floating_point() else None, non_blocking) (1,023,954,756 bytes, 8.84%)</title>
            <rect x="0.7359%" y="452" width="8.8394%" height="21" fill="rgb(255,205,205)"/>
            <text x="0.9859%" y="465.50">TB@@/expo..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/rnn.py:113 (flatten_parameters) (107,311,210 bytes, 0.93%)</title>
            <rect x="9.5756%" y="430" width="0.9264%" height="21" fill="rgb(255,235,235)"/>
            <text x="9.8256%" y="443.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;self.batch_first, bool(self.bidirectional)) (107,311,210 bytes, 0.93%)</title>
            <rect x="9.5756%" y="452" width="0.9264%" height="21" fill="rgb(255,235,235)"/>
            <text x="9.8256%" y="465.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:328 (train) (1,131,541,035 bytes, 9.77%)</title>
            <rect x="0.7339%" y="210" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="223.50">/export/b1..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;model = model.to(device) (1,131,541,035 bytes, 9.77%)</title>
            <rect x="0.7339%" y="232" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="245.50">TB@@/expor..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/module.py:381 (to) (1,131,538,810 bytes, 9.77%)</title>
            <rect x="0.7339%" y="254" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="267.50">/export/b1..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return self._apply(convert) (1,131,538,810 bytes, 9.77%)</title>
            <rect x="0.7339%" y="276" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="289.50">TB@@/expor..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/module.py:187 (_apply) (1,131,538,810 bytes, 9.77%)</title>
            <rect x="0.7339%" y="298" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="311.50">/export/b1..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;module._apply(fn) (1,131,538,810 bytes, 9.77%)</title>
            <rect x="0.7339%" y="320" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="333.50">TB@@/expor..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/module.py:187 (_apply) (1,131,538,786 bytes, 9.77%)</title>
            <rect x="0.7339%" y="342" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="355.50">/export/b1..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;module._apply(fn) (1,131,538,786 bytes, 9.77%)</title>
            <rect x="0.7339%" y="364" width="9.7681%" height="21" fill="rgb(255,203,203)"/>
            <text x="0.9839%" y="377.50">TB@@/expor..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/site-packages/torch/nn/modules/rnn.py:117 (_apply) (107,328,150 bytes, 0.93%)</title>
            <rect x="9.5755%" y="386" width="0.9265%" height="21" fill="rgb(255,235,235)"/>
            <text x="9.8255%" y="399.50"></text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;self.flatten_parameters() (107,328,150 bytes, 0.93%)</title>
            <rect x="9.5755%" y="408" width="0.9265%" height="21" fill="rgb(255,235,235)"/>
            <text x="9.8255%" y="421.50"></text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:354 (train) (8,770,224,703 bytes, 75.71%)</title>
            <rect x="10.5021%" y="210" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="223.50">/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:354 (tr..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;train_json_nolab_list.append(json.load(f)['utts']) (8,770,224,703 bytes, 75.71%)</title>
            <rect x="10.5021%" y="232" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="245.50">TB@@/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:354..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:299 (load) (8,770,224,503 bytes, 75.71%)</title>
            <rect x="10.5021%" y="254" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="267.50">/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:299 (load)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw) (8,770,224,503 bytes, 75.71%)</title>
            <rect x="10.5021%" y="276" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="289.50">TB@@/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:299@@TB</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:354 (loads) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="298" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="311.50">/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:354 (loads)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return _default_decoder.decode(s) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="320" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="333.50">TB@@/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:354@@TB</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:339 (decode) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="342" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="355.50">/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:339 (decode)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.raw_decode(s, idx=_w(s, 0).end()) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="364" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="377.50">TB@@/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:339@@TB</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:355 (raw_decode) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="386" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="399.50">/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:355 (raw_decode)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.scan_once(s, idx) (8,770,224,447 bytes, 75.71%)</title>
            <rect x="10.5021%" y="408" width="75.7099%" height="21" fill="rgb(255,119,119)"/>
            <text x="10.7521%" y="421.50">TB@@/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:355@@TB</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:296 (load) (356,154,042 bytes, 3.07%)</title>
            <rect x="86.2121%" y="254" width="3.0745%" height="21" fill="rgb(255,223,223)"/>
            <text x="86.4621%" y="267.50">/..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return loads(fp.read(), (356,154,042 bytes, 3.07%)</title>
            <rect x="86.2121%" y="276" width="3.0745%" height="21" fill="rgb(255,223,223)"/>
            <text x="86.4621%" y="289.50">T..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:349 (loads) (712,300,492 bytes, 6.15%)</title>
            <rect x="89.2866%" y="298" width="6.1490%" height="21" fill="rgb(255,212,212)"/>
            <text x="89.5366%" y="311.50">/expo..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;s = s.decode(detect_encoding(s), 'surrogatepass') (712,300,492 bytes, 6.15%)</title>
            <rect x="89.2866%" y="320" width="6.1490%" height="21" fill="rgb(255,212,212)"/>
            <text x="89.5366%" y="333.50">TB@@/..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/espnet/tts/pytorch_backend/tts_speakerid_semi_multicorpora.py:365 (train) (1,597,003,955 bytes, 13.79%)</title>
            <rect x="86.2121%" y="210" width="13.7863%" height="21" fill="rgb(255,194,194)"/>
            <text x="86.4621%" y="223.50">/export/b18/jch..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;train_json_list.append(json.load(f)['utts']) (1,597,003,955 bytes, 13.79%)</title>
            <rect x="86.2121%" y="232" width="13.7863%" height="21" fill="rgb(255,194,194)"/>
            <text x="86.4621%" y="245.50">TB@@/export/b18..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:299 (load) (1,240,849,913 bytes, 10.71%)</title>
            <rect x="89.2866%" y="254" width="10.7118%" height="21" fill="rgb(255,200,200)"/>
            <text x="89.5366%" y="267.50">/export/b18..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw) (1,240,849,913 bytes, 10.71%)</title>
            <rect x="89.2866%" y="276" width="10.7118%" height="21" fill="rgb(255,200,200)"/>
            <text x="89.5366%" y="289.50">TB@@/export..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/__init__.py:354 (loads) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="298" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="311.50">/ex..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;return _default_decoder.decode(s) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="320" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="333.50">TB@..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:339 (decode) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="342" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="355.50">/ex..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.raw_decode(s, idx=_w(s, 0).end()) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="364" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="377.50">TB@..</text>
        </g>
        <g>
            <title>/export/b18/jcho/espnet3/tools/venv/lib/python3.6/json/decoder.py:355 (raw_decode) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="386" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="399.50">/ex..</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;obj, end = self.scan_once(s, idx) (528,549,125 bytes, 4.56%)</title>
            <rect x="95.4356%" y="408" width="4.5628%" height="21" fill="rgb(255,217,217)"/>
            <text x="95.6856%" y="421.50">TB@..</text>
        </g>
        <g>
            <title>../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:194 (main) (11,522,062,722 bytes, 99.47%)</title>
            <rect x="0.5330%" y="166" width="99.4654%" height="21" fill="rgb(255,100,100)"/>
            <text x="0.7830%" y="179.50">../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:194 (main)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;train(args) (11,522,062,722 bytes, 99.47%)</title>
            <rect x="0.5330%" y="188" width="99.4654%" height="21" fill="rgb(255,100,100)"/>
            <text x="0.7830%" y="201.50">TB@@../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:194@@TB</text>
        </g>
        <g>
            <title>../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:200 (&lt;module&gt;) (11,556,987,522 bytes, 99.77%)</title>
            <rect x="0.2315%" y="122" width="99.7669%" height="21" fill="rgb(255,100,100)"/>
            <text x="0.4815%" y="135.50">../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:200 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>&#160;&#160;&#160;&#160;main(sys.argv[1:]) (11,556,987,522 bytes, 99.77%)</title>
            <rect x="0.2315%" y="144" width="99.7669%" height="21" fill="rgb(255,100,100)"/>
            <text x="0.4815%" y="157.50">TB@@../../../espnet/bin/tts_train_speakerid_semi_multicorpora.py:200@@TB</text>
        </g>
        <g>
            <title>all (11,583,991,697 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>