# Edited from conf/train_pytorch_forwardtacotron2+spkemb_2flstm512Nusecat_fullyunsync_shufflebatching_semi_multicorpora_unispksampling.yaml

# network architecture related
model-module: espnet.nets.pytorch_backend.e2e_tts_tacotron2_speakeridonly_temp_unsync:Tacotron2

# encoder related
embed-dim: 512
elayers: 1
eunits: 512
econv-layers: 3 # if set 0, no conv layer is used
econv-chans: 512
econv-filts: 5

# decoder related (edited to follow https://github.com/as-ideas/ForwardTacotron)
use-speaker-embedding: true

# attention related
num-save-attention: 0 # no attention
use-batch-norm: true # whether to use batch normalization in conv layer
use-concate: true   # (TODO) JJ: check this with true. whether to concatenate encoder embedding with decoder lstm outputs
use-residual: false  # whether to use residual connection in encoder convolution
use-masking: true    # whether to mask the padded part in loss calculation
bce-pos-weight: 1.0  # weight for positive samples of stop token in cross-entropy calculation
reduction-factor: 1  # currently this is 1 for forwardtacotron2

# minibatch related
batch-size: 128
batch-sort-key: shuffle # shuffle or input or output. Shuffle will lead to fixed (NO dynamic) batch size as specified in "batch-size"
maxlen-in: 133         # if input length  > maxlen-in, batchsize is reduced (if use "shuffle", not effect). For atype='noatt', it is same as maxlen-out since 3 x # input frames == (approx.) # output frames
maxlen-out: 400        # if output length > maxlen-out, batchsize is reduced (if use "shuffle", not effect)

# optimization related
lr: 3e-4
eps: 1e-6
weight-decay: 0.0
dropout-rate: 0.5
zoneout-rate: 0.1
epochs: 100
patience: 0

# uniform speaker sampling
sample-uniform-spk: true
total-num-utt-inbatches: 2574400 # 40225 * 64. This [# nolab batches] * [batch_size]
